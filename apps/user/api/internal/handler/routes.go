// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"github.com/ljp-lachouchou/chan_xin/apps/user/api/internal/middleware"
	"net/http"

	user "github.com/ljp-lachouchou/chan_xin/apps/user/api/internal/handler/user"
	"github.com/ljp-lachouchou/chan_xin/apps/user/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LimitMiddleware},
			[]rest.Route{
				{
					// 用户登入
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: user.LoginHandler(serverCtx),
				},
				{
					// 保持与etcd的连接
					Method:  http.MethodGet,
					Path:    "/ping",
					Handler: user.PingRpcHandler(serverCtx),
				},
				{
					// 用户注册
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: user.RegisterHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{middleware.NewTokenRevokeCheckMiddleware().Handle(serverCtx)},
			[]rest.Route{
				{
					// 更新用户
					Method:  http.MethodPatch,
					Path:    "/update",
					Handler: user.UpdateHandler(serverCtx),
				},
				{
					// 单个用户查询
					Method:  http.MethodGet,
					Path:    "/userinfo",
					Handler: user.UserInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/v1/user"),
	)
}
