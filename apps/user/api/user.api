syntax = "v1"

info (
	title:  "用户api"
	author: "ljp"
)

type (
	User {
		Id       string `json:"id"`
		Phone    string `json:"phone""`
		Nickname string `json:"nickname"`
		Sex      byte   `json:"sex"`
		Avatar   string `json:"avatar"`
	}
	RegisterReq {
		Phone    string `json:"phone"`
		Password string `json:"password"`
		Nickname string `json:"nickname"`
		Sex      byte   `json:"sex"`
		Avatar   string `json:"avatar"`
	}
	RegisterResp {
		token  string `json:"token"` //token
		expire int64  `json:"expire"` //token有效时长
	}
	LoginReq {
		phone    string `json:"phone"`
		password string `json:"password"`
	}
	LoginResp {
		id     string `json:"id"` //用户id
		token  string `json:"token"` //用户登录token
		expire int64  `json:"expire"` //token有效时长
	}
	UserInfoReq {
		id string `form:"id"` //用户id
	}
	UserInfoResp {
		Info User `json:"info"` //用户信息
	}
	UpdateReq {
		nickname *string `json:"nickname,optional"` //昵称
		avatar   *string `json:"avatar,optional"` // 头像
		sex      *int32  `json:"sex,optional"` //性别
	}
	UpdateResp {
		Info User `json:"info"`
	}
	FindUserReq {
		name  string   `form:"name",omitempty` //昵称
		phone string   `form:"phone",omitempty` //电话
		ids   []string `form:"ids",omitempty` //id
	}
	FindUserResp {
		Infos []User `json:"infos"`
	}
)

@server (
	prefix:     v1/user
	group:      user
	middleware: LimitMiddleware
)
service user {
	@doc "用户注册"
	@handler register
	post /register (RegisterReq) returns (RegisterResp)

	@doc "用户登入"
	@handler login
	post /login (LoginReq) returns (LoginResp)

	@doc "获取用户"
	@handler findUser
	get /findUser (FindUserReq) returns (FindUserResp)

	@doc "保持与etcd的连接"
	@handler pingRpc
	get /ping
}

@server (
	prefix:     v1/user
	group:      user
	middleware: WriteTokenToHeader
	middleware: TokenRevokeCheck
	jwt:        JwtAuth
)
service user {
	@doc "单个用户查询"
	@handler userInfo
	get /userinfo (UserInfoReq) returns (UserInfoResp)

	@doc "更新用户"
	@handler update
	patch /update (UpdateReq) returns (UpdateResp)
}

