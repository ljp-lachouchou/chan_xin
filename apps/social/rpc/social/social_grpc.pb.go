// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: apps/social/rpc/social.proto

package social

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SocialService_ApplyFriend_FullMethodName           = "/social.SocialService/ApplyFriend"
	SocialService_HandleFriendApply_FullMethodName     = "/social.SocialService/HandleFriendApply"
	SocialService_DeleteFriend_FullMethodName          = "/social.SocialService/DeleteFriend"
	SocialService_UpdateFriendStatus_FullMethodName    = "/social.SocialService/UpdateFriendStatus"
	SocialService_GetFriendInfo_FullMethodName         = "/social.SocialService/GetFriendInfo"
	SocialService_GetFriendList_FullMethodName         = "/social.SocialService/GetFriendList"
	SocialService_GetFriendApplyList_FullMethodName    = "/social.SocialService/GetFriendApplyList"
	SocialService_CreateGroup_FullMethodName           = "/social.SocialService/CreateGroup"
	SocialService_QuitGroup_FullMethodName             = "/social.SocialService/QuitGroup"
	SocialService_InviteToGroup_FullMethodName         = "/social.SocialService/InviteToGroup"
	SocialService_HandleGroupInvite_FullMethodName     = "/social.SocialService/HandleGroupInvite"
	SocialService_ApplyGroup_FullMethodName            = "/social.SocialService/ApplyGroup"
	SocialService_HandleGroupApply_FullMethodName      = "/social.SocialService/HandleGroupApply"
	SocialService_UpdateGroupStatus_FullMethodName     = "/social.SocialService/UpdateGroupStatus"
	SocialService_ManageGroupMember_FullMethodName     = "/social.SocialService/ManageGroupMember"
	SocialService_RemoveAdmin_FullMethodName           = "/social.SocialService/RemoveAdmin"
	SocialService_GetGroupInfo_FullMethodName          = "/social.SocialService/GetGroupInfo"
	SocialService_GetGroupMembers_FullMethodName       = "/social.SocialService/GetGroupMembers"
	SocialService_GetGroupAdmins_FullMethodName        = "/social.SocialService/GetGroupAdmins"
	SocialService_SetGroupMemberSetting_FullMethodName = "/social.SocialService/SetGroupMemberSetting"
	SocialService_Ping_FullMethodName                  = "/social.SocialService/Ping"
)

// SocialServiceClient is the client API for SocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ========== 服务接口定义 ==========
type SocialServiceClient interface {
	// === 好友管理接口 ===
	ApplyFriend(ctx context.Context, in *FriendApplyRequest, opts ...grpc.CallOption) (*FriendApplyResponse, error)
	HandleFriendApply(ctx context.Context, in *FriendApplyAction, opts ...grpc.CallOption) (*FriendApplyActionResp, error)
	DeleteFriend(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationResp, error)
	UpdateFriendStatus(ctx context.Context, in *FriendStatusUpdate, opts ...grpc.CallOption) (*FriendStatusUpdateResp, error)
	GetFriendInfo(ctx context.Context, in *FriendInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
	GetFriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
	GetFriendApplyList(ctx context.Context, in *FriendApplyListReq, opts ...grpc.CallOption) (*FriendApplyListResp, error)
	// === 群组管理接口 ===
	CreateGroup(ctx context.Context, in *GroupCreationRequest, opts ...grpc.CallOption) (*GroupInfo, error)
	QuitGroup(ctx context.Context, in *GroupQuitRequest, opts ...grpc.CallOption) (*GroupQuitResp, error)
	InviteToGroup(ctx context.Context, in *GroupInvitation, opts ...grpc.CallOption) (*GroupInvitationResp, error)
	HandleGroupInvite(ctx context.Context, in *GroupInviteAction, opts ...grpc.CallOption) (*GroupInviteActionResp, error)
	ApplyGroup(ctx context.Context, in *GroupApplyReq, opts ...grpc.CallOption) (*GroupApplyResp, error)
	HandleGroupApply(ctx context.Context, in *GroupApplyAction, opts ...grpc.CallOption) (*GroupApplyActionResp, error)
	UpdateGroupStatus(ctx context.Context, in *GroupStatusUpdate, opts ...grpc.CallOption) (*GroupStatusUpdateResp, error)
	ManageGroupMember(ctx context.Context, in *GroupMemberManage, opts ...grpc.CallOption) (*GroupMemberManageResp, error)
	RemoveAdmin(ctx context.Context, in *RemoveAdminReq, opts ...grpc.CallOption) (*RemoveAdminResp, error)
	GetGroupInfo(ctx context.Context, in *GroupInfoRequest, opts ...grpc.CallOption) (*GroupInfo, error)
	GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error)
	GetGroupAdmins(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error)
	SetGroupMemberSetting(ctx context.Context, in *GroupMemberSettingUpdate, opts ...grpc.CallOption) (*GroupMemberSettingUpdateResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type socialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialServiceClient(cc grpc.ClientConnInterface) SocialServiceClient {
	return &socialServiceClient{cc}
}

func (c *socialServiceClient) ApplyFriend(ctx context.Context, in *FriendApplyRequest, opts ...grpc.CallOption) (*FriendApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendApplyResponse)
	err := c.cc.Invoke(ctx, SocialService_ApplyFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) HandleFriendApply(ctx context.Context, in *FriendApplyAction, opts ...grpc.CallOption) (*FriendApplyActionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendApplyActionResp)
	err := c.cc.Invoke(ctx, SocialService_HandleFriendApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) DeleteFriend(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationResp)
	err := c.cc.Invoke(ctx, SocialService_DeleteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UpdateFriendStatus(ctx context.Context, in *FriendStatusUpdate, opts ...grpc.CallOption) (*FriendStatusUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendStatusUpdateResp)
	err := c.cc.Invoke(ctx, SocialService_UpdateFriendStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFriendInfo(ctx context.Context, in *FriendInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, SocialService_GetFriendInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendListResp)
	err := c.cc.Invoke(ctx, SocialService_GetFriendList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetFriendApplyList(ctx context.Context, in *FriendApplyListReq, opts ...grpc.CallOption) (*FriendApplyListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendApplyListResp)
	err := c.cc.Invoke(ctx, SocialService_GetFriendApplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) CreateGroup(ctx context.Context, in *GroupCreationRequest, opts ...grpc.CallOption) (*GroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, SocialService_CreateGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) QuitGroup(ctx context.Context, in *GroupQuitRequest, opts ...grpc.CallOption) (*GroupQuitResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupQuitResp)
	err := c.cc.Invoke(ctx, SocialService_QuitGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) InviteToGroup(ctx context.Context, in *GroupInvitation, opts ...grpc.CallOption) (*GroupInvitationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupInvitationResp)
	err := c.cc.Invoke(ctx, SocialService_InviteToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) HandleGroupInvite(ctx context.Context, in *GroupInviteAction, opts ...grpc.CallOption) (*GroupInviteActionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupInviteActionResp)
	err := c.cc.Invoke(ctx, SocialService_HandleGroupInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ApplyGroup(ctx context.Context, in *GroupApplyReq, opts ...grpc.CallOption) (*GroupApplyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupApplyResp)
	err := c.cc.Invoke(ctx, SocialService_ApplyGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) HandleGroupApply(ctx context.Context, in *GroupApplyAction, opts ...grpc.CallOption) (*GroupApplyActionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupApplyActionResp)
	err := c.cc.Invoke(ctx, SocialService_HandleGroupApply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) UpdateGroupStatus(ctx context.Context, in *GroupStatusUpdate, opts ...grpc.CallOption) (*GroupStatusUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupStatusUpdateResp)
	err := c.cc.Invoke(ctx, SocialService_UpdateGroupStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) ManageGroupMember(ctx context.Context, in *GroupMemberManage, opts ...grpc.CallOption) (*GroupMemberManageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupMemberManageResp)
	err := c.cc.Invoke(ctx, SocialService_ManageGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) RemoveAdmin(ctx context.Context, in *RemoveAdminReq, opts ...grpc.CallOption) (*RemoveAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAdminResp)
	err := c.cc.Invoke(ctx, SocialService_RemoveAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGroupInfo(ctx context.Context, in *GroupInfoRequest, opts ...grpc.CallOption) (*GroupInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, SocialService_GetGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGroupMembers(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMembersResp)
	err := c.cc.Invoke(ctx, SocialService_GetGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) GetGroupAdmins(ctx context.Context, in *GetGroupMembersReq, opts ...grpc.CallOption) (*GetGroupMembersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupMembersResp)
	err := c.cc.Invoke(ctx, SocialService_GetGroupAdmins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) SetGroupMemberSetting(ctx context.Context, in *GroupMemberSettingUpdate, opts ...grpc.CallOption) (*GroupMemberSettingUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupMemberSettingUpdateResp)
	err := c.cc.Invoke(ctx, SocialService_SetGroupMemberSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResp)
	err := c.cc.Invoke(ctx, SocialService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServiceServer is the server API for SocialService service.
// All implementations must embed UnimplementedSocialServiceServer
// for forward compatibility.
//
// ========== 服务接口定义 ==========
type SocialServiceServer interface {
	// === 好友管理接口 ===
	ApplyFriend(context.Context, *FriendApplyRequest) (*FriendApplyResponse, error)
	HandleFriendApply(context.Context, *FriendApplyAction) (*FriendApplyActionResp, error)
	DeleteFriend(context.Context, *RelationRequest) (*RelationResp, error)
	UpdateFriendStatus(context.Context, *FriendStatusUpdate) (*FriendStatusUpdateResp, error)
	GetFriendInfo(context.Context, *FriendInfoRequest) (*UserInfo, error)
	GetFriendList(context.Context, *FriendListReq) (*FriendListResp, error)
	GetFriendApplyList(context.Context, *FriendApplyListReq) (*FriendApplyListResp, error)
	// === 群组管理接口 ===
	CreateGroup(context.Context, *GroupCreationRequest) (*GroupInfo, error)
	QuitGroup(context.Context, *GroupQuitRequest) (*GroupQuitResp, error)
	InviteToGroup(context.Context, *GroupInvitation) (*GroupInvitationResp, error)
	HandleGroupInvite(context.Context, *GroupInviteAction) (*GroupInviteActionResp, error)
	ApplyGroup(context.Context, *GroupApplyReq) (*GroupApplyResp, error)
	HandleGroupApply(context.Context, *GroupApplyAction) (*GroupApplyActionResp, error)
	UpdateGroupStatus(context.Context, *GroupStatusUpdate) (*GroupStatusUpdateResp, error)
	ManageGroupMember(context.Context, *GroupMemberManage) (*GroupMemberManageResp, error)
	RemoveAdmin(context.Context, *RemoveAdminReq) (*RemoveAdminResp, error)
	GetGroupInfo(context.Context, *GroupInfoRequest) (*GroupInfo, error)
	GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error)
	GetGroupAdmins(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error)
	SetGroupMemberSetting(context.Context, *GroupMemberSettingUpdate) (*GroupMemberSettingUpdateResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	mustEmbedUnimplementedSocialServiceServer()
}

// UnimplementedSocialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSocialServiceServer struct{}

func (UnimplementedSocialServiceServer) ApplyFriend(context.Context, *FriendApplyRequest) (*FriendApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFriend not implemented")
}
func (UnimplementedSocialServiceServer) HandleFriendApply(context.Context, *FriendApplyAction) (*FriendApplyActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendApply not implemented")
}
func (UnimplementedSocialServiceServer) DeleteFriend(context.Context, *RelationRequest) (*RelationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedSocialServiceServer) UpdateFriendStatus(context.Context, *FriendStatusUpdate) (*FriendStatusUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFriendStatus not implemented")
}
func (UnimplementedSocialServiceServer) GetFriendInfo(context.Context, *FriendInfoRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInfo not implemented")
}
func (UnimplementedSocialServiceServer) GetFriendList(context.Context, *FriendListReq) (*FriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedSocialServiceServer) GetFriendApplyList(context.Context, *FriendApplyListReq) (*FriendApplyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendApplyList not implemented")
}
func (UnimplementedSocialServiceServer) CreateGroup(context.Context, *GroupCreationRequest) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedSocialServiceServer) QuitGroup(context.Context, *GroupQuitRequest) (*GroupQuitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroup not implemented")
}
func (UnimplementedSocialServiceServer) InviteToGroup(context.Context, *GroupInvitation) (*GroupInvitationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteToGroup not implemented")
}
func (UnimplementedSocialServiceServer) HandleGroupInvite(context.Context, *GroupInviteAction) (*GroupInviteActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGroupInvite not implemented")
}
func (UnimplementedSocialServiceServer) ApplyGroup(context.Context, *GroupApplyReq) (*GroupApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyGroup not implemented")
}
func (UnimplementedSocialServiceServer) HandleGroupApply(context.Context, *GroupApplyAction) (*GroupApplyActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGroupApply not implemented")
}
func (UnimplementedSocialServiceServer) UpdateGroupStatus(context.Context, *GroupStatusUpdate) (*GroupStatusUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupStatus not implemented")
}
func (UnimplementedSocialServiceServer) ManageGroupMember(context.Context, *GroupMemberManage) (*GroupMemberManageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGroupMember not implemented")
}
func (UnimplementedSocialServiceServer) RemoveAdmin(context.Context, *RemoveAdminReq) (*RemoveAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmin not implemented")
}
func (UnimplementedSocialServiceServer) GetGroupInfo(context.Context, *GroupInfoRequest) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedSocialServiceServer) GetGroupMembers(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupMembers not implemented")
}
func (UnimplementedSocialServiceServer) GetGroupAdmins(context.Context, *GetGroupMembersReq) (*GetGroupMembersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupAdmins not implemented")
}
func (UnimplementedSocialServiceServer) SetGroupMemberSetting(context.Context, *GroupMemberSettingUpdate) (*GroupMemberSettingUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupMemberSetting not implemented")
}
func (UnimplementedSocialServiceServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSocialServiceServer) mustEmbedUnimplementedSocialServiceServer() {}
func (UnimplementedSocialServiceServer) testEmbeddedByValue()                       {}

// UnsafeSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServiceServer will
// result in compilation errors.
type UnsafeSocialServiceServer interface {
	mustEmbedUnimplementedSocialServiceServer()
}

func RegisterSocialServiceServer(s grpc.ServiceRegistrar, srv SocialServiceServer) {
	// If the following call pancis, it indicates UnimplementedSocialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SocialService_ServiceDesc, srv)
}

func _SocialService_ApplyFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ApplyFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ApplyFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ApplyFriend(ctx, req.(*FriendApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_HandleFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendApplyAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).HandleFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_HandleFriendApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).HandleFriendApply(ctx, req.(*FriendApplyAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_DeleteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).DeleteFriend(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UpdateFriendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UpdateFriendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UpdateFriendStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UpdateFriendStatus(ctx, req.(*FriendStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetFriendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFriendInfo(ctx, req.(*FriendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFriendList(ctx, req.(*FriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetFriendApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendApplyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetFriendApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetFriendApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetFriendApplyList(ctx, req.(*FriendApplyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).CreateGroup(ctx, req.(*GroupCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_QuitGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).QuitGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_QuitGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).QuitGroup(ctx, req.(*GroupQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_InviteToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInvitation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).InviteToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_InviteToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).InviteToGroup(ctx, req.(*GroupInvitation))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_HandleGroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).HandleGroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_HandleGroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).HandleGroupInvite(ctx, req.(*GroupInviteAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ApplyGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ApplyGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ApplyGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ApplyGroup(ctx, req.(*GroupApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_HandleGroupApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupApplyAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).HandleGroupApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_HandleGroupApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).HandleGroupApply(ctx, req.(*GroupApplyAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_UpdateGroupStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).UpdateGroupStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_UpdateGroupStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).UpdateGroupStatus(ctx, req.(*GroupStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_ManageGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberManage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).ManageGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_ManageGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).ManageGroupMember(ctx, req.(*GroupMemberManage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_RemoveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).RemoveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_RemoveAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).RemoveAdmin(ctx, req.(*RemoveAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGroupInfo(ctx, req.(*GroupInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGroupMembers(ctx, req.(*GetGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_GetGroupAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupMembersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).GetGroupAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_GetGroupAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).GetGroupAdmins(ctx, req.(*GetGroupMembersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_SetGroupMemberSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberSettingUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).SetGroupMemberSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_SetGroupMemberSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).SetGroupMemberSetting(ctx, req.(*GroupMemberSettingUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SocialService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialService_ServiceDesc is the grpc.ServiceDesc for SocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social.SocialService",
	HandlerType: (*SocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyFriend",
			Handler:    _SocialService_ApplyFriend_Handler,
		},
		{
			MethodName: "HandleFriendApply",
			Handler:    _SocialService_HandleFriendApply_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _SocialService_DeleteFriend_Handler,
		},
		{
			MethodName: "UpdateFriendStatus",
			Handler:    _SocialService_UpdateFriendStatus_Handler,
		},
		{
			MethodName: "GetFriendInfo",
			Handler:    _SocialService_GetFriendInfo_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _SocialService_GetFriendList_Handler,
		},
		{
			MethodName: "GetFriendApplyList",
			Handler:    _SocialService_GetFriendApplyList_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _SocialService_CreateGroup_Handler,
		},
		{
			MethodName: "QuitGroup",
			Handler:    _SocialService_QuitGroup_Handler,
		},
		{
			MethodName: "InviteToGroup",
			Handler:    _SocialService_InviteToGroup_Handler,
		},
		{
			MethodName: "HandleGroupInvite",
			Handler:    _SocialService_HandleGroupInvite_Handler,
		},
		{
			MethodName: "ApplyGroup",
			Handler:    _SocialService_ApplyGroup_Handler,
		},
		{
			MethodName: "HandleGroupApply",
			Handler:    _SocialService_HandleGroupApply_Handler,
		},
		{
			MethodName: "UpdateGroupStatus",
			Handler:    _SocialService_UpdateGroupStatus_Handler,
		},
		{
			MethodName: "ManageGroupMember",
			Handler:    _SocialService_ManageGroupMember_Handler,
		},
		{
			MethodName: "RemoveAdmin",
			Handler:    _SocialService_RemoveAdmin_Handler,
		},
		{
			MethodName: "GetGroupInfo",
			Handler:    _SocialService_GetGroupInfo_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _SocialService_GetGroupMembers_Handler,
		},
		{
			MethodName: "GetGroupAdmins",
			Handler:    _SocialService_GetGroupAdmins_Handler,
		},
		{
			MethodName: "SetGroupMemberSetting",
			Handler:    _SocialService_SetGroupMemberSetting_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SocialService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/social/rpc/social.proto",
}