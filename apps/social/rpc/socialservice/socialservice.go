// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: social.proto

package socialservice

import (
	"context"

	"github.com/ljp-lachouchou/chan_xin/apps/social/rpc/social"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FriendApplyAction            = social.FriendApplyAction
	FriendApplyActionResp        = social.FriendApplyActionResp
	FriendApplyRequest           = social.FriendApplyRequest
	FriendApplyResponse          = social.FriendApplyResponse
	FriendInfoRequest            = social.FriendInfoRequest
	FriendStatus                 = social.FriendStatus
	FriendStatusUpdate           = social.FriendStatusUpdate
	FriendStatusUpdateResp       = social.FriendStatusUpdateResp
	GroupCreationRequest         = social.GroupCreationRequest
	GroupInfo                    = social.GroupInfo
	GroupInfoRequest             = social.GroupInfoRequest
	GroupInvitation              = social.GroupInvitation
	GroupInvitationResp          = social.GroupInvitationResp
	GroupInviteAction            = social.GroupInviteAction
	GroupInviteActionResp        = social.GroupInviteActionResp
	GroupMemberManage            = social.GroupMemberManage
	GroupMemberManageResp        = social.GroupMemberManageResp
	GroupMemberSetting           = social.GroupMemberSetting
	GroupMemberSettingUpdate     = social.GroupMemberSettingUpdate
	GroupMemberSettingUpdateResp = social.GroupMemberSettingUpdateResp
	GroupQuitRequest             = social.GroupQuitRequest
	GroupQuitResp                = social.GroupQuitResp
	GroupStatus                  = social.GroupStatus
	GroupStatusUpdate            = social.GroupStatusUpdate
	GroupStatusUpdateResp        = social.GroupStatusUpdateResp
	PingReq                      = social.PingReq
	PingResp                     = social.PingResp
	RelationRequest              = social.RelationRequest
	RelationResp                 = social.RelationResp
	UserInfo                     = social.UserInfo

	SocialService interface {
		// === 好友管理接口 ===
		ApplyFriend(ctx context.Context, in *FriendApplyRequest, opts ...grpc.CallOption) (*FriendApplyResponse, error)
		HandleFriendApply(ctx context.Context, in *FriendApplyAction, opts ...grpc.CallOption) (*FriendApplyActionResp, error)
		DeleteFriend(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationResp, error)
		UpdateFriendStatus(ctx context.Context, in *FriendStatusUpdate, opts ...grpc.CallOption) (*FriendStatusUpdateResp, error)
		GetFriendInfo(ctx context.Context, in *FriendInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
		// === 群组管理接口 ===
		CreateGroup(ctx context.Context, in *GroupCreationRequest, opts ...grpc.CallOption) (*GroupInfo, error)
		QuitGroup(ctx context.Context, in *GroupQuitRequest, opts ...grpc.CallOption) (*GroupQuitResp, error)
		InviteToGroup(ctx context.Context, in *GroupInvitation, opts ...grpc.CallOption) (*GroupInvitationResp, error)
		HandleGroupInvite(ctx context.Context, in *GroupInviteAction, opts ...grpc.CallOption) (*GroupInviteActionResp, error)
		UpdateGroupStatus(ctx context.Context, in *GroupStatusUpdate, opts ...grpc.CallOption) (*GroupStatusUpdateResp, error)
		ManageGroupMember(ctx context.Context, in *GroupMemberManage, opts ...grpc.CallOption) (*GroupMemberManageResp, error)
		GetGroupInfo(ctx context.Context, in *GroupInfoRequest, opts ...grpc.CallOption) (*GroupInfo, error)
		SetGroupMemberSetting(ctx context.Context, in *GroupMemberSettingUpdate, opts ...grpc.CallOption) (*GroupMemberSettingUpdateResp, error)
		Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	}

	defaultSocialService struct {
		cli zrpc.Client
	}
)

func NewSocialService(cli zrpc.Client) SocialService {
	return &defaultSocialService{
		cli: cli,
	}
}

// === 好友管理接口 ===
func (m *defaultSocialService) ApplyFriend(ctx context.Context, in *FriendApplyRequest, opts ...grpc.CallOption) (*FriendApplyResponse, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.ApplyFriend(ctx, in, opts...)
}

func (m *defaultSocialService) HandleFriendApply(ctx context.Context, in *FriendApplyAction, opts ...grpc.CallOption) (*FriendApplyActionResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.HandleFriendApply(ctx, in, opts...)
}

func (m *defaultSocialService) DeleteFriend(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

func (m *defaultSocialService) UpdateFriendStatus(ctx context.Context, in *FriendStatusUpdate, opts ...grpc.CallOption) (*FriendStatusUpdateResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.UpdateFriendStatus(ctx, in, opts...)
}

func (m *defaultSocialService) GetFriendInfo(ctx context.Context, in *FriendInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.GetFriendInfo(ctx, in, opts...)
}

// === 群组管理接口 ===
func (m *defaultSocialService) CreateGroup(ctx context.Context, in *GroupCreationRequest, opts ...grpc.CallOption) (*GroupInfo, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

func (m *defaultSocialService) QuitGroup(ctx context.Context, in *GroupQuitRequest, opts ...grpc.CallOption) (*GroupQuitResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.QuitGroup(ctx, in, opts...)
}

func (m *defaultSocialService) InviteToGroup(ctx context.Context, in *GroupInvitation, opts ...grpc.CallOption) (*GroupInvitationResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.InviteToGroup(ctx, in, opts...)
}

func (m *defaultSocialService) HandleGroupInvite(ctx context.Context, in *GroupInviteAction, opts ...grpc.CallOption) (*GroupInviteActionResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.HandleGroupInvite(ctx, in, opts...)
}

func (m *defaultSocialService) UpdateGroupStatus(ctx context.Context, in *GroupStatusUpdate, opts ...grpc.CallOption) (*GroupStatusUpdateResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.UpdateGroupStatus(ctx, in, opts...)
}

func (m *defaultSocialService) ManageGroupMember(ctx context.Context, in *GroupMemberManage, opts ...grpc.CallOption) (*GroupMemberManageResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.ManageGroupMember(ctx, in, opts...)
}

func (m *defaultSocialService) GetGroupInfo(ctx context.Context, in *GroupInfoRequest, opts ...grpc.CallOption) (*GroupInfo, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.GetGroupInfo(ctx, in, opts...)
}

func (m *defaultSocialService) SetGroupMemberSetting(ctx context.Context, in *GroupMemberSettingUpdate, opts ...grpc.CallOption) (*GroupMemberSettingUpdateResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.SetGroupMemberSetting(ctx, in, opts...)
}

func (m *defaultSocialService) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	client := social.NewSocialServiceClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}
