// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: social.proto

package server

import (
	"context"

	"github.com/ljp-lachouchou/chan_xin/apps/social/rpc/internal/logic"
	"github.com/ljp-lachouchou/chan_xin/apps/social/rpc/internal/svc"
	"github.com/ljp-lachouchou/chan_xin/apps/social/rpc/social"
)

type SocialServiceServer struct {
	svcCtx *svc.ServiceContext
	social.UnimplementedSocialServiceServer
}

func NewSocialServiceServer(svcCtx *svc.ServiceContext) *SocialServiceServer {
	return &SocialServiceServer{
		svcCtx: svcCtx,
	}
}

// === 好友管理接口 ===
func (s *SocialServiceServer) ApplyFriend(ctx context.Context, in *social.FriendApplyRequest) (*social.FriendApplyResponse, error) {
	l := logic.NewApplyFriendLogic(ctx, s.svcCtx)
	return l.ApplyFriend(in)
}

func (s *SocialServiceServer) HandleFriendApply(ctx context.Context, in *social.FriendApplyAction) (*social.FriendApplyActionResp, error) {
	l := logic.NewHandleFriendApplyLogic(ctx, s.svcCtx)
	return l.HandleFriendApply(in)
}

func (s *SocialServiceServer) DeleteFriend(ctx context.Context, in *social.RelationRequest) (*social.RelationResp, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

func (s *SocialServiceServer) UpdateFriendStatus(ctx context.Context, in *social.FriendStatusUpdate) (*social.FriendStatusUpdateResp, error) {
	l := logic.NewUpdateFriendStatusLogic(ctx, s.svcCtx)
	return l.UpdateFriendStatus(in)
}

func (s *SocialServiceServer) GetFriendInfo(ctx context.Context, in *social.FriendInfoRequest) (*social.UserInfo, error) {
	l := logic.NewGetFriendInfoLogic(ctx, s.svcCtx)
	return l.GetFriendInfo(in)
}

func (s *SocialServiceServer) GetFriendList(ctx context.Context, in *social.FriendListReq) (*social.FriendListResp, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

func (s *SocialServiceServer) GetFriendApplyList(ctx context.Context, in *social.FriendApplyListReq) (*social.FriendApplyListResp, error) {
	l := logic.NewGetFriendApplyListLogic(ctx, s.svcCtx)
	return l.GetFriendApplyList(in)
}

func (s *SocialServiceServer) GetHandleFriendApplyList(ctx context.Context, in *social.HandleFriendApplyReq) (*social.FriendApplyListResp, error) {
	l := logic.NewGetHandleFriendApplyListLogic(ctx, s.svcCtx)
	return l.GetHandleFriendApplyList(in)
}

// === 群组管理接口 ===
func (s *SocialServiceServer) CreateGroup(ctx context.Context, in *social.GroupCreationRequest) (*social.GroupInfo, error) {
	l := logic.NewCreateGroupLogic(ctx, s.svcCtx)
	return l.CreateGroup(in)
}

func (s *SocialServiceServer) QuitGroup(ctx context.Context, in *social.GroupQuitRequest) (*social.GroupQuitResp, error) {
	l := logic.NewQuitGroupLogic(ctx, s.svcCtx)
	return l.QuitGroup(in)
}

func (s *SocialServiceServer) InviteToGroup(ctx context.Context, in *social.GroupInvitation) (*social.GroupInvitationResp, error) {
	l := logic.NewInviteToGroupLogic(ctx, s.svcCtx)
	return l.InviteToGroup(in)
}

func (s *SocialServiceServer) HandleGroupInvite(ctx context.Context, in *social.GroupInviteAction) (*social.GroupInviteActionResp, error) {
	l := logic.NewHandleGroupInviteLogic(ctx, s.svcCtx)
	return l.HandleGroupInvite(in)
}

func (s *SocialServiceServer) ApplyGroup(ctx context.Context, in *social.GroupApplyReq) (*social.GroupApplyResp, error) {
	l := logic.NewApplyGroupLogic(ctx, s.svcCtx)
	return l.ApplyGroup(in)
}

func (s *SocialServiceServer) HandleGroupApply(ctx context.Context, in *social.GroupApplyAction) (*social.GroupApplyActionResp, error) {
	l := logic.NewHandleGroupApplyLogic(ctx, s.svcCtx)
	return l.HandleGroupApply(in)
}

func (s *SocialServiceServer) UpdateGroupStatus(ctx context.Context, in *social.GroupStatusUpdate) (*social.GroupStatusUpdateResp, error) {
	l := logic.NewUpdateGroupStatusLogic(ctx, s.svcCtx)
	return l.UpdateGroupStatus(in)
}

func (s *SocialServiceServer) ManageGroupMember(ctx context.Context, in *social.GroupMemberManage) (*social.GroupMemberManageResp, error) {
	l := logic.NewManageGroupMemberLogic(ctx, s.svcCtx)
	return l.ManageGroupMember(in)
}

func (s *SocialServiceServer) RemoveAdmin(ctx context.Context, in *social.RemoveAdminReq) (*social.RemoveAdminResp, error) {
	l := logic.NewRemoveAdminLogic(ctx, s.svcCtx)
	return l.RemoveAdmin(in)
}

func (s *SocialServiceServer) GetGroupInfo(ctx context.Context, in *social.GroupInfoRequest) (*social.GroupInfo, error) {
	l := logic.NewGetGroupInfoLogic(ctx, s.svcCtx)
	return l.GetGroupInfo(in)
}

func (s *SocialServiceServer) GetGroupMembers(ctx context.Context, in *social.GetGroupMembersReq) (*social.GetGroupMembersResp, error) {
	l := logic.NewGetGroupMembersLogic(ctx, s.svcCtx)
	return l.GetGroupMembers(in)
}

func (s *SocialServiceServer) GetGroupAdmins(ctx context.Context, in *social.GetGroupMembersReq) (*social.GetGroupMembersResp, error) {
	l := logic.NewGetGroupAdminsLogic(ctx, s.svcCtx)
	return l.GetGroupAdmins(in)
}

func (s *SocialServiceServer) SetGroupMemberSetting(ctx context.Context, in *social.GroupMemberSettingUpdate) (*social.GroupMemberSettingUpdateResp, error) {
	l := logic.NewSetGroupMemberSettingLogic(ctx, s.svcCtx)
	return l.SetGroupMemberSetting(in)
}

func (s *SocialServiceServer) Ping(ctx context.Context, in *social.PingReq) (*social.PingResp, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}
