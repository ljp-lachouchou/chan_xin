// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupInfoFieldNames          = builder.RawFieldNames(&GroupInfo{})
	groupInfoRows                = strings.Join(groupInfoFieldNames, ",")
	groupInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(groupInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(groupInfoFieldNames, "`group_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupInfoGroupIdPrefix = "cache:groupInfo:groupId:"
)

type (
	groupInfoModel interface {
		Insert(ctx context.Context, data *GroupInfo) (sql.Result, error)
		FindOne(ctx context.Context, groupId string) (*GroupInfo, error)
		Update(ctx context.Context, data *GroupInfo) error
		Delete(ctx context.Context, groupId string) error
		GetNicknameByGid(ctx context.Context,groupId string) (string, error)
	}

	defaultGroupInfoModel struct {
		sqlc.CachedConn
		table string
	}

	GroupInfo struct {
		GroupId    string    `db:"group_id"`    // 群ID
		Name       string    `db:"name"`        // 群名称
		OwnerId    string    `db:"owner_id"`    // 群主ID
		MaxMembers uint64    `db:"max_members"` // 群人数上限
		CreatedAt  time.Time `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time `db:"updated_at"`  // 更新时间
	}
)

func newGroupInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupInfoModel {
	return &defaultGroupInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_info`",
	}
}

func (m *defaultGroupInfoModel) Delete(ctx context.Context, groupId string) error {
	groupInfoGroupIdKey := fmt.Sprintf("%s%v", cacheGroupInfoGroupIdPrefix, groupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, groupId)
	}, groupInfoGroupIdKey)
	return err
}

func (m *defaultGroupInfoModel) FindOne(ctx context.Context, groupId string) (*GroupInfo, error) {
	groupInfoGroupIdKey := fmt.Sprintf("%s%v", cacheGroupInfoGroupIdPrefix, groupId)
	var resp GroupInfo
	err := m.QueryRowCtx(ctx, &resp, groupInfoGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultGroupInfoModel)GetNicknameByGid(ctx context.Context,groupId string) (string, error) {
	query := fmt.Sprintf("select %s from %s where `group_id` = ?",groupInfoRows,m.table)
	var resp GroupInfo
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, groupId)
	switch err {
	case nil:
		return resp.Name, nil
	case sqlc.ErrNotFound:
		return "", ErrNotFound
	default:
		return "", err
	}
}
func (m *defaultGroupInfoModel) Insert(ctx context.Context, data *GroupInfo) (sql.Result, error) {
	groupInfoGroupIdKey := fmt.Sprintf("%s%v", cacheGroupInfoGroupIdPrefix, data.GroupId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, groupInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GroupId, data.Name, data.OwnerId, data.MaxMembers)
	}, groupInfoGroupIdKey)
	return ret, err
}

func (m *defaultGroupInfoModel) Update(ctx context.Context, data *GroupInfo) error {
	groupInfoGroupIdKey := fmt.Sprintf("%s%v", cacheGroupInfoGroupIdPrefix, data.GroupId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, groupInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.OwnerId, data.MaxMembers, data.GroupId)
	}, groupInfoGroupIdKey)
	return err
}

func (m *defaultGroupInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupInfoGroupIdPrefix, primary)
}

func (m *defaultGroupInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupInfoModel) tableName() string {
	return m.table
}
