// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupMemberFieldNames          = builder.RawFieldNames(&GroupMember{})
	groupMemberRows                = strings.Join(groupMemberFieldNames, ",")
	groupMemberRowsExpectAutoSetInsets   = strings.Join(stringx.Remove(groupMemberFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`","`id`","`joined_at`"), ",")
	groupMemberRowsExpectAutoSet   = strings.Join(stringx.Remove(groupMemberFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupMemberRowsWithPlaceHolder = strings.Join(stringx.Remove(groupMemberFieldNames, "`group_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupMemberGroupIdPrefix       = "cache:groupMember:groupId:"
	cacheGroupMemberGroupIdUserIdPrefix = "cache:groupMember:groupId:userId:"
)

type (
	groupMemberModel interface {
		Insert(ctx context.Context, data *GroupMember) (sql.Result, error)
		InsertMembers(ctx context.Context,session sqlx.Session, data ...*GroupMember) (sql.Result, error)
		FindOne(ctx context.Context, groupId string) (*GroupMember, error)
		FindOneByGroupIdUserId(ctx context.Context, groupId string, userId string) (*GroupMember, error)
		Update(ctx context.Context, data *GroupMember) error
		Delete(ctx context.Context, groupId string) error
		Transx(ctx context.Context,fn func(ctx context.Context, session sqlx.Session) error) error
	}

	defaultGroupMemberModel struct {
		sqlc.CachedConn
		table string
	}

	GroupMember struct {
		Id            uint64    `db:"id"`
		GroupId       string    `db:"group_id"`       // 群ID
		UserId        string    `db:"user_id"`        // 用户ID
		GroupNickname string    `db:"group_nickname"` // 群内昵称
		ShowNickname  int64     `db:"show_nickname"`  // 显示昵称 (0:否, 1:是)
		IsAdmin       int64     `db:"is_admin"`       // 管理员 (0:否, 1:是)
		IsMuted       int64     `db:"is_muted"`       // 免打扰 (0:否, 1:是)
		IsTopped      int64     `db:"is_topped"`      // 置顶 (0:否, 1:是)
		Remark        string    `db:"remark"`         // 群备注
		JoinedAt      time.Time `db:"joined_at"`      // 加入时间
	}
)

func newGroupMemberModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupMemberModel {
	return &defaultGroupMemberModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_member`",
	}
}
func (m *defaultGroupMemberModel) Transx(ctx context.Context,fn func(ctx context.Context, session sqlx.Session) error) error{
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}
func (m *defaultGroupMemberModel) InsertMembers(ctx context.Context,session sqlx.Session, data ...*GroupMember) (sql.Result, error) {
	var (
		sql strings.Builder
		args []any
	)
	if len(data) == 0{
		return nil,nil
	}
	fmt.Println(groupMemberRowsExpectAutoSetInsets)
	sql.WriteString(fmt.Sprintf("insert into %s (%s) values ",m.table,groupMemberRowsExpectAutoSetInsets))
	for i,v := range data {
		sql.WriteString("(?, ?, ?, ?, ?, ?, ?, ?)")
		args = append(args, v.GroupId, v.UserId, v.GroupNickname, v.ShowNickname, v.IsAdmin, v.IsMuted, v.IsTopped, v.Remark)
		if i == len(data) - 1 {
			break
		}
		sql.WriteString(",")
	}
	return session.ExecCtx(ctx,sql.String(),args...)
}
func (m *defaultGroupMemberModel) Delete(ctx context.Context, groupId string) error {
	data, err := m.FindOne(ctx, groupId)
	if err != nil {
		return err
	}

	groupMemberGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMemberGroupIdPrefix, groupId)
	groupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `group_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, groupId)
	}, groupMemberGroupIdKey, groupMemberGroupIdUserIdKey)
	return err
}

func (m *defaultGroupMemberModel) FindOne(ctx context.Context, groupId string) (*GroupMember, error) {
	groupMemberGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMemberGroupIdPrefix, groupId)
	var resp GroupMember
	err := m.QueryRowCtx(ctx, &resp, groupMemberGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupMemberRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, groupId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMemberModel) FindOneByGroupIdUserId(ctx context.Context, groupId string, userId string) (*GroupMember, error) {
	groupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheGroupMemberGroupIdUserIdPrefix, groupId, userId)
	var resp GroupMember
	err := m.QueryRowIndexCtx(ctx, &resp, groupMemberGroupIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `group_id` = ? and `user_id` = ? limit 1", groupMemberRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, groupId, userId); err != nil {
			return nil, err
		}
		return resp.GroupId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMemberModel) Insert(ctx context.Context, data *GroupMember) (sql.Result, error) {
	groupMemberGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMemberGroupIdPrefix, data.GroupId)
	groupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, groupMemberRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.GroupId, data.UserId, data.GroupNickname, data.ShowNickname, data.IsAdmin, data.IsMuted, data.IsTopped, data.Remark, data.JoinedAt)
	}, groupMemberGroupIdKey, groupMemberGroupIdUserIdKey)
	return ret, err
}

func (m *defaultGroupMemberModel) Update(ctx context.Context, newData *GroupMember) error {
	data, err := m.FindOne(ctx, newData.GroupId)
	if err != nil {
		return err
	}

	groupMemberGroupIdKey := fmt.Sprintf("%s%v", cacheGroupMemberGroupIdPrefix, data.GroupId)
	groupMemberGroupIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheGroupMemberGroupIdUserIdPrefix, data.GroupId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `group_id` = ?", m.table, groupMemberRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Id, newData.UserId, newData.GroupNickname, newData.ShowNickname, newData.IsAdmin, newData.IsMuted, newData.IsTopped, newData.Remark, newData.JoinedAt, newData.GroupId)
	}, groupMemberGroupIdKey, groupMemberGroupIdUserIdKey)
	return err
}

func (m *defaultGroupMemberModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheGroupMemberGroupIdPrefix, primary)
}

func (m *defaultGroupMemberModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `group_id` = ? limit 1", groupMemberRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupMemberModel) tableName() string {
	return m.table
}
