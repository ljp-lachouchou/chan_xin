// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	friendApplyFieldNames          = builder.RawFieldNames(&FriendApply{})
	friendApplyRows                = strings.Join(friendApplyFieldNames, ",")
	friendApplyRowsExpectAutoSet   = strings.Join(stringx.Remove(friendApplyFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	friendApplyRowsWithPlaceHolder = strings.Join(stringx.Remove(friendApplyFieldNames, "`apply_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFriendApplyApplyIdPrefix = "cache:friendApply:applyId:"
	cacheFriendApplyApplicantIdTargetIdPrefix = "cache:friendApply:applicantId:targetId:"
)

type (
	friendApplyModel interface {
		Insert(ctx context.Context, data *FriendApply) (sql.Result, error)
		FindOne(ctx context.Context, applyId string) (*FriendApply, error)
		FindByApplicantIdAndTargetId(ctx context.Context, applicantId string, targetId string) (*FriendApply, error)
		UpdateWithSession(ctx context.Context,session sqlx.Session, data *FriendApply) error
		Update(ctx context.Context, data *FriendApply) error
		Delete(ctx context.Context, applyId string) error
		DeleteByUidAndFId(ctx context.Context,session sqlx.Session, userId, friendId string) error
		Tranx(ctx context.Context,fn func(ctx context.Context, session sqlx.Session) error) error
		ListByUserIdJoinUsers(ctx context.Context,uid string) ([]*FriendApplyJoinUsers, error)
	}

	defaultFriendApplyModel struct {
		sqlc.CachedConn
		table string
	}

	FriendApply struct {
		ApplyId     string    `db:"apply_id"`     // 申请ID
		ApplicantId string    `db:"applicant_id"` // 申请人ID
		TargetId    string    `db:"target_id"`    // 目标用户ID
		GreetMsg    string    `db:"greet_msg"`    // 打招呼消息
		Status      int64     `db:"status"`       // 状态 (0:待处理, 1:同意, 2:拒绝)
		CreatedAt   time.Time `db:"created_at"`   // 申请时间
	}
	FriendApplyJoinUsers struct {
		Id     string    `db:"id"`     // 对方ID
		Nickname string    `db:"nickname"` // 对方昵称
		Avatar    string    `db:"avatar"`    // 对方头像
		Sex uint32 `db:"sex"` //对方性别 (0-未知 1-男 2-女)
		GreetMsg    string    `db:"greet_msg"`    // 打招呼消息
		Status      int64     `db:"status"`       // 状态 (0:待处理, 1:同意, 2:拒绝)
	}
)
func (m *defaultFriendApplyModel) DeleteByUidAndFId(ctx context.Context,session sqlx.Session, userId, friendId string) error {
	cacheFriendApplyApplicantIdTargetIdKey1 := fmt.Sprintf("%s%v:%v", cacheFriendApplyApplicantIdTargetIdPrefix, userId, friendId)
	cacheFriendApplyApplicantIdTargetIdKey2 := fmt.Sprintf("%s%v:%v", cacheFriendApplyApplicantIdTargetIdPrefix, friendId, userId)
	execSql1 := fmt.Sprintf("delete from %s where `applicant_id` = ? and target_id = ?", m.table)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		return session.ExecCtx(ctx, execSql1, userId, friendId)
	}, cacheFriendApplyApplicantIdTargetIdKey1)
	if err != nil {
		return err
	}
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {

		return session.ExecCtx(ctx, execSql1, friendId, userId)
	}, cacheFriendApplyApplicantIdTargetIdKey2)
	m.DelCacheCtx(ctx, cacheFriendApplyApplicantIdTargetIdKey1)
	m.DelCacheCtx(ctx, cacheFriendApplyApplicantIdTargetIdKey2)
	return err
}
func (m *defaultFriendApplyModel) ListByUserIdJoinUsers(ctx context.Context,uid string) ([]*FriendApplyJoinUsers, error) {
	query := fmt.Sprintf("SELECT friend_apply.target_id as id,users.nickname as nickname,users.avatar as avatar,users.sex as sex,friend_apply.greet_msg as greet_msg,friend_apply.`status` as status FROM  friend_apply JOIN users ON friend_apply.target_id = users.id where friend_apply.applicant_id=?;")
	var resp []*FriendApplyJoinUsers
	err:= m.QueryRowsNoCacheCtx(ctx,&resp,query,uid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func newFriendApplyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFriendApplyModel {
	return &defaultFriendApplyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`friend_apply`",
	}
}
func (m *defaultFriendApplyModel) Tranx(ctx context.Context,fn func(ctx context.Context, session sqlx.Session) error) error{
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx,session)
	})
}
func (m *defaultFriendApplyModel) Delete(ctx context.Context, applyId string) error {
	friendApplyApplyIdKey := fmt.Sprintf("%s%v", cacheFriendApplyApplyIdPrefix, applyId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `apply_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, applyId)
	}, friendApplyApplyIdKey)
	return err
}
func (m *defaultFriendApplyModel) FindByApplicantIdAndTargetId(ctx context.Context, applicantId string, targetId string) (*FriendApply, error) {
	var resp FriendApply
	query := fmt.Sprintf("select %s from %s where `applicant_id` = ? and `target_id` = ?", friendApplyRows, m.table)
	err := m.QueryRowNoCacheCtx(ctx,&resp,query, applicantId, targetId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultFriendApplyModel) FindOne(ctx context.Context, applyId string) (*FriendApply, error) {
	friendApplyApplyIdKey := fmt.Sprintf("%s%v", cacheFriendApplyApplyIdPrefix, applyId)
	var resp FriendApply
	err := m.QueryRowCtx(ctx, &resp, friendApplyApplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `apply_id` = ? limit 1", friendApplyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, applyId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendApplyModel) Insert(ctx context.Context, data *FriendApply) (sql.Result, error) {
	friendApplyApplyIdKey := fmt.Sprintf("%s%v", cacheFriendApplyApplyIdPrefix, data.ApplyId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, friendApplyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ApplyId, data.ApplicantId, data.TargetId, data.GreetMsg, data.Status)
	}, friendApplyApplyIdKey)
	return ret, err
}

func (m *defaultFriendApplyModel) UpdateWithSession(ctx context.Context,session sqlx.Session, data *FriendApply) error {
	friendApplyApplyIdKey := fmt.Sprintf("%s%v", cacheFriendApplyApplyIdPrefix, data.ApplyId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `apply_id` = ?", m.table, friendApplyRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, data.ApplicantId, data.TargetId, data.GreetMsg, data.Status, data.ApplyId)
	}, friendApplyApplyIdKey)
	return err
}
func (m *defaultFriendApplyModel) Update(ctx context.Context, data *FriendApply) error {
	friendApplyApplyIdKey := fmt.Sprintf("%s%v", cacheFriendApplyApplyIdPrefix, data.ApplyId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `apply_id` = ?", m.table, friendApplyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ApplicantId, data.TargetId, data.GreetMsg, data.Status, data.ApplyId)
	}, friendApplyApplyIdKey)
	return err
}

func (m *defaultFriendApplyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFriendApplyApplyIdPrefix, primary)
}

func (m *defaultFriendApplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `apply_id` = ? limit 1", friendApplyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFriendApplyModel) tableName() string {
	return m.table
}
