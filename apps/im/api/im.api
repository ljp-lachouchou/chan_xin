syntax = "v1" // go-zero API 语法版本

info (
	title:   "IM 服务 API"
	desc:    "基于 go-zero 的即时通讯服务接口定义"
	author:  "ljp"
	version: "v1.0"
)

// ------------ 模型定义 -----------------
type ChatLog {
	Id             string `json:"id,optional"` // 消息ID
	ConversationId string `json:"conversationId,optional"` // 会话ID
	SendId         string `json:"sendId,optional"` // 发送者ID
	RecvId         string `json:"recvId,optional"` // 接收者ID
	MsgType        int32  `json:"msgType,optional"` // 消息类型
	MsgContent     string `json:"msgContent,optional"` // 消息内容
	ChatType       int32  `json:"chatType,optional"` // 聊天类型
	SendTime       int64  `json:"sendTime,optional"` // 发送时间
}

type Conversation {
	ConversationId string  `json:"conversationId,optional"` // 会话ID
	ChatType       int32   `json:"chatType,optional"` // 聊天类型
	TargetId       string  `json:"targetId,optional"` // 目标ID（用户/群组）
	IsShow         bool    `json:"isShow,optional"` // 是否显示
	Seq            int64   `json:"seq,optional"` // 序列号
	Total          int32   `json:"total,optional"` // 消息总数
	ToRead         int32   `json:"toRead,optional"` // 未读消息数
	Read           int32   `json:"read,optional"` // 已读消息数
	Msg            ChatLog `json:"msg,optional"` // 最新消息
}

// ------------ 请求/响应结构 ---------------
type GetConversationsReq {
	UserId string `form:"userId"` // 用户ID（查询参数）
}

type GetConversationsResp {
	ConversationList map[string]Conversation `json:"conversationList"` // 会话列表
}

type PutConversationsReq {
	Id               string                  `json:"id"` // 操作ID
	UserId           string                  `json:"userId"` // 用户ID
	ConversationList map[string]Conversation `json:"conversationList"` // 会话数据
}

type PutConversationsResp {
	Success bool `json:"success"` // 操作结果
}

type GetChatLogReq {
	ConversationId string `form:"conversationId"` // 会话ID（查询参数）
	StartSendTime  int64  `form:"startSendTime,optional"` // 起始时间
	EndSendTime    int64  `form:"endSendTime,optional"` // 结束时间
	Count          int64  `form:"count,optional"` // 获取数量
	MsgId          string `form:"msgId,optional"` // 起始消息ID
}

type GetChatLogResp {
	List []ChatLog `json:"list"` // 消息列表
}

type SetUpUserConversationReq {
	SendId   string `json:"sendId"` // 发起者ID
	RecvId   string `json:"recvId"` // 接收者ID
	ChatType int32  `json:"chatType"` // 聊天类型
}

type SetUpUserConversationResp {
	ConversationId string `json:"conversationId"` // 新建的会话ID
}

type CreateGroupConversationReq {
	GroupId  string `json:"groupId"` // 群组ID
	CreateId string `json:"createId"` // 创建者ID
}

type CreateGroupConversationResp {
	ConversationId string `json:"conversationId"` // 新建的群会话ID
}

// ------------ 服务路由定义 ---------------
@server (
	prefix:     /v1/im // 统一路由前缀
	group:      chat
	middleware: LimitMiddleware
)
service im-api {
	// 获取聊天记录
	@handler GetChatLogHandler
	get /getChatLog (GetChatLogReq) returns (GetChatLogResp)

	// 创建私聊会话
	@handler SetUpUserConversationHandler
	post /setUpUserConversation (SetUpUserConversationReq)

	// 创建群聊会话
	@handler CreateGroupConversationHandler
	post /createGroupConversation (CreateGroupConversationReq)

	// 获取会话列表
	@handler GetConversationsHandler
	get /getConversations (GetConversationsReq) returns (GetConversationsResp)

	@handler ping
	get /ping

	// 更新会话信息
	@handler PutConversationsHandler
	put /putConversations (PutConversationsReq) returns (PutConversationsResp)
}

