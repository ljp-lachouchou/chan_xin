// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package types

type ChatLog struct {
	Id             string `json:"id,optional"`             // 消息ID
	ConversationId string `json:"conversationId,optional"` // 会话ID
	SendId         string `json:"sendId,optional"`         // 发送者ID
	RecvId         string `json:"recvId,optional"`         // 接收者ID
	MsgType        int32  `json:"msgType,optional"`        // 消息类型
	MsgContent     string `json:"msgContent,optional"`     // 消息内容
	ChatType       int32  `json:"chatType,optional"`       // 聊天类型
	SendTime       int64  `json:"sendTime,optional"`       // 发送时间
}

type Conversation struct {
	ConversationId string  `json:"conversationId,optional"` // 会话ID
	ChatType       int32   `json:"chatType,optional"`       // 聊天类型
	TargetId       string  `json:"targetId,optional"`       // 目标ID（用户/群组）
	IsShow         bool    `json:"isShow,optional"`         // 是否显示
	Seq            int64   `json:"seq,optional"`            // 序列号
	Total          int32   `json:"total,optional"`          // 消息总数
	ToRead         int32   `json:"toRead,optional"`         // 未读消息数
	Read           int32   `json:"read,optional"`           // 已读消息数
	Msg            ChatLog `json:"msg,optional"`            // 最新消息
}

type CreateGroupConversationReq struct {
	GroupId  string `json:"groupId"`  // 群组ID
	CreateId string `json:"createId"` // 创建者ID
}

type CreateGroupConversationResp struct {
	ConversationId string `json:"conversationId"` // 新建的群会话ID
}

type GetChatLogReq struct {
	ConversationId string `json:"conversationId"`         // 会话ID（查询参数）
	StartSendTime  int64  `json:"startSendTime,optional"` // 起始时间
	EndSendTime    int64  `json:"endSendTime,optional"`   // 结束时间
	Count          int64  `json:"count,optional"`         // 获取数量
	MsgId          string `json:"msgId,optional"`         // 起始消息ID
}

type GetChatLogResp struct {
	List []ChatLog `json:"list"` // 消息列表
}

type GetConversationsReq struct {
	UserId string `json:"userId"` // 用户ID（查询参数）
}

type GetConversationsResp struct {
	ConversationList map[string]Conversation `json:"conversationList"` // 会话列表
}

type PutConversationsReq struct {
	Id               string                  `json:"id"`               // 操作ID
	UserId           string                  `json:"userId"`           // 用户ID
	ConversationList map[string]Conversation `json:"conversationList"` // 会话数据
}

type PutConversationsResp struct {
	Success bool `json:"success"` // 操作结果
}

type SetUpUserConversationReq struct {
	SendId   string `json:"sendId"`   // 发起者ID
	RecvId   string `json:"recvId"`   // 接收者ID
	ChatType int32  `json:"chatType"` // 聊天类型
}

type SetUpUserConversationResp struct {
	ConversationId string `json:"conversationId"` // 新建的会话ID
}
