// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package dynamicsmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postLikesFieldNames          = builder.RawFieldNames(&PostLikes{})
	postLikesRows                = strings.Join(postLikesFieldNames, ",")
	postLikesRowsExpectAutoSet   = strings.Join(stringx.Remove(postLikesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	postLikesRowsWithPlaceHolder = strings.Join(stringx.Remove(postLikesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePostLikesIdPrefix           = "cache:postLikes:id:"
	cachePostLikesPostIdUserIdPrefix = "cache:postLikes:postId:userId:"
	cachePostLikesPostIdPrefix = "cache:postLikes:postId:"
)

type (
	postLikesModel interface {
		Insert(ctx context.Context, data *PostLikes) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*PostLikes, error)
		FindByPostId(ctx context.Context, postId string) ([]*PostLikes, error)
		FindOneByPostIdUserId(ctx context.Context, postId string, userId string) (*PostLikes, error)
		Update(ctx context.Context, data *PostLikes) error
		Delete(ctx context.Context, id string) error
		UserInPost(ctx context.Context, userId string, postId string) (*bool, error)
	}

	defaultPostLikesModel struct {
		sqlc.CachedConn
		table string
	}

	PostLikes struct {
		Id        string    `db:"id"`
		PostId    string    `db:"post_id"`
		UserId    string    `db:"user_id"`
		CreatedAt time.Time `db:"created_at"`
		IsDeleted bool      `db:"is_deleted"`
	}
)

func newPostLikesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPostLikesModel {
	return &defaultPostLikesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`post_likes`",
	}
}
func (m *defaultPostLikesModel) UserInPost(ctx context.Context, userId string, postId string) (*bool, error) {
	query := fmt.Sprintf("select `is_deleted` from %s where `post_id` = ? and `user_id` = ?",m.table)
	var isDeleted bool
	err := m.QueryRowNoCacheCtx(ctx, &isDeleted, query,postId,userId)
	switch err {
	case nil:
		return &isDeleted, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPostLikesModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	postLikesIdKey := fmt.Sprintf("%s%v", cachePostLikesIdPrefix, id)
	postLikesPostIdUserIdKey := fmt.Sprintf("%s%v:%v", cachePostLikesPostIdUserIdPrefix, data.PostId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, postLikesIdKey, postLikesPostIdUserIdKey)
	return err
}
func (m *defaultPostLikesModel) FindByPostId(ctx context.Context, postId string) ([]*PostLikes, error) {
	var list []*PostLikes
	query := fmt.Sprintf("select %s from %s where `post_id` = ? and `is_deleted` = 0 order by created_at", postLikesRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx,&list,query,postId)
	switch err {
	case nil:
		return list, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPostLikesModel) FindOne(ctx context.Context, id string) (*PostLikes, error) {
	postLikesIdKey := fmt.Sprintf("%s%v", cachePostLikesIdPrefix, id)
	var resp PostLikes
	err := m.QueryRowCtx(ctx, &resp, postLikesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postLikesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostLikesModel) FindOneByPostIdUserId(ctx context.Context, postId string, userId string) (*PostLikes, error) {
	postLikesPostIdUserIdKey := fmt.Sprintf("%s%v:%v", cachePostLikesPostIdUserIdPrefix, postId, userId)
	var resp PostLikes
	err := m.QueryRowIndexCtx(ctx, &resp, postLikesPostIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `post_id` = ? and `user_id` = ? limit 1", postLikesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, postId, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostLikesModel) Insert(ctx context.Context, data *PostLikes) (sql.Result, error) {
	postLikesIdKey := fmt.Sprintf("%s%v", cachePostLikesIdPrefix, data.Id)
	postLikesPostIdUserIdKey := fmt.Sprintf("%s%v:%v", cachePostLikesPostIdUserIdPrefix, data.PostId, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, postLikesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.PostId, data.UserId, data.IsDeleted)
	}, postLikesIdKey, postLikesPostIdUserIdKey)
	return ret, err
}

func (m *defaultPostLikesModel) Update(ctx context.Context, newData *PostLikes) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	postLikesIdKey := fmt.Sprintf("%s%v", cachePostLikesIdPrefix, data.Id)
	postLikesPostIdUserIdKey := fmt.Sprintf("%s%v:%v", cachePostLikesPostIdUserIdPrefix, data.PostId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postLikesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PostId, newData.UserId, newData.IsDeleted, newData.Id)
	}, postLikesIdKey, postLikesPostIdUserIdKey)
	return err
}

func (m *defaultPostLikesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePostLikesIdPrefix, primary)
}

func (m *defaultPostLikesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postLikesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPostLikesModel) tableName() string {
	return m.table
}
