// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package dynamicsmodels
import (
	"context"
	"go.mongodb.org/mongo-driver/mongo/options"
	"time"

	"github.com/zeromicro/go-zero/core/stores/mon"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

var DefaultPostCount int64 = 20
type postsModel interface {
	Insert(ctx context.Context, data *Posts) error
	FindOne(ctx context.Context, id string) (*Posts, error)
	Update(ctx context.Context, data *Posts) (*mongo.UpdateResult, error)
	FindByUserId(ctx context.Context, userId string) ([]*Posts, error)
	Delete(ctx context.Context, id string) (int64, error)
	FindPostsByUserId(ctx context.Context, userId string,offset,limit int64,isPin bool) ([]*Posts, error)
	//in表示存在元素在目标集合之中
	FindCanVisiablePosts(ctx context.Context,userId string,offset,limit int64) ([]*Posts, error)
}

type defaultPostsModel struct {
	conn *mon.Model
}

func newDefaultPostsModel(conn *mon.Model) *defaultPostsModel {
	return &defaultPostsModel{conn: conn}
}

func (m *defaultPostsModel) Insert(ctx context.Context, data *Posts) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	_, err := m.conn.InsertOne(ctx, data)
	return err
}
func (m *defaultPostsModel) FindCanVisiablePosts(ctx context.Context,userId string,offset,limit int64) ([]*Posts, error) {
	opt := options.FindOptions{Limit: &DefaultPostCount,Sort: bson.M{"createAt": -1}}
	opt.SetSkip(offset)
	filiter := bson.M{
		"$or":bson.A{
			bson.M{
				"visibility":0,//公开
				"$or": bson.A{
					bson.M{"visibleTo": bson.M{"$size": 0}}, // 空数组（所有人可见）
					bson.M{"visibleTo": bson.M{"$in": []string{userId}}}, // 包含当前用户
				},
			},
			bson.M{//自己是作者
				"userId":userId,
			},
			bson.M{ //自定义下，visiableTo与我传进来的userId有交集
				"visibility":2,
				"$or": bson.A{
					bson.M{"visibleTo": bson.M{"$size": 0}}, // 空数组（所有人可见）
					bson.M{"visibleTo": bson.M{"$in": []string{userId}}}, // 包含当前用户
				},
			},
		},
	}
	var data []*Posts
	err := m.conn.Find(ctx, &data, filiter, &opt)
	switch err {
	case nil:
		return data, nil
	case mon.ErrNotFound:
		return nil, MongoErrNotFound
	default:
		return nil, err
	}

}
func (m *defaultPostsModel) FindPostsByUserId(ctx context.Context, userId string,offset,limit int64,isPin bool) ([]*Posts, error) {
	opt := options.FindOptions{
		Limit:               &DefaultPostCount,
		Sort:                bson.M{"createAt": -1},
	}
	opt.SetSkip(offset)
	filiter := bson.M{
		"userId":userId,
		"isPinned":isPin,
	}
	if limit > 0 {
		opt.Limit = &limit
	}
	var data []*Posts
	err := m.conn.Find(ctx, &data, filiter, &opt)
	switch err {
	case nil:
		return data, nil
	case mon.ErrNotFound:
		return nil, MongoErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPostsModel) FindOne(ctx context.Context, id string) (*Posts, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Posts

	err = m.conn.FindOne(ctx, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case mon.ErrNotFound:
		return nil, MongoErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPostsModel) FindByUserId(ctx context.Context, userId string) ([]*Posts, error) {
	var data []*Posts
	err := m.conn.Find(ctx,&data,bson.M{"userId": userId})
	switch err {
	case nil:
		return data, nil
	case mon.ErrNotFound:
		return nil, MongoErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultPostsModel) Update(ctx context.Context, data *Posts) (*mongo.UpdateResult, error) {
	data.UpdateAt = time.Now()

	res, err := m.conn.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return res, err
}

func (m *defaultPostsModel) Delete(ctx context.Context, id string) (int64, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return 0, ErrInvalidObjectId
	}

	res, err := m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return res, err
}
