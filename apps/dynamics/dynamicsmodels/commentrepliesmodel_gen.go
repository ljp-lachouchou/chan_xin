// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package dynamicsmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentRepliesFieldNames          = builder.RawFieldNames(&CommentReplies{})
	commentRepliesRows                = strings.Join(commentRepliesFieldNames, ",")
	commentRepliesRowsExpectAutoSet   = strings.Join(stringx.Remove(commentRepliesFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentRepliesRowsWithPlaceHolder = strings.Join(stringx.Remove(commentRepliesFieldNames, "`comment_replie_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommentRepliesCommentReplieIdPrefix = "cache:commentReplies:commentReplieId:"
)

type (
	commentRepliesModel interface {
		Insert(ctx context.Context, data *CommentReplies) (sql.Result, error)
		FindOne(ctx context.Context, commentReplieId string) (*CommentReplies, error)
		FindByCommentIds(ctx context.Context, commentIds ...string) ([]*CommentReplies, error)
		Update(ctx context.Context, data *CommentReplies) error
		Delete(ctx context.Context, commentReplieId string) error
	}

	defaultCommentRepliesModel struct {
		sqlc.CachedConn
		table string
	}

	CommentReplies struct {
		CommentReplieId string    `db:"comment_replie_id"`
		CommentId       string    `db:"comment_id"`
		UserId          string    `db:"user_id"`
		TargetUserId    string    `db:"target_user_id"`
		Content         string    `db:"content"`
		CreatedAt       time.Time `db:"created_at"`
		IsDeleted       bool      `db:"is_deleted"`
	}
)

func newCommentRepliesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentRepliesModel {
	return &defaultCommentRepliesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`comment_replies`",
	}
}

func (m *defaultCommentRepliesModel) Delete(ctx context.Context, commentReplieId string) error {
	commentRepliesCommentReplieIdKey := fmt.Sprintf("%s%v", cacheCommentRepliesCommentReplieIdPrefix, commentReplieId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `comment_replie_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, commentReplieId)
	}, commentRepliesCommentReplieIdKey)
	return err
}
func (m *defaultCommentRepliesModel) FindByCommentIds(ctx context.Context, commentIds ...string) ([]*CommentReplies, error) {
	var list []*CommentReplies
	if len(commentIds) == 0 {
		return nil,nil
	}
	var holder string
	holder = strings.Repeat("?,", len(commentIds)-1) + "?"
	query := fmt.Sprintf("select %s from %s where `comment_id` in (%s) and `is_deleted` = 0 order by `created_at`",commentRepliesRows,m.table,holder)
	args := make([]interface{}, len(commentIds))
	for i, id := range commentIds {
		args[i] = id
	}
	err := m.QueryRowsNoCacheCtx(ctx, &list, query, args...)
	switch err {
	case nil:
		return list, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultCommentRepliesModel) FindOne(ctx context.Context, commentReplieId string) (*CommentReplies, error) {
	commentRepliesCommentReplieIdKey := fmt.Sprintf("%s%v", cacheCommentRepliesCommentReplieIdPrefix, commentReplieId)
	var resp CommentReplies
	err := m.QueryRowCtx(ctx, &resp, commentRepliesCommentReplieIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `comment_replie_id` = ? limit 1", commentRepliesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, commentReplieId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentRepliesModel) Insert(ctx context.Context, data *CommentReplies) (sql.Result, error) {
	commentRepliesCommentReplieIdKey := fmt.Sprintf("%s%v", cacheCommentRepliesCommentReplieIdPrefix, data.CommentReplieId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, commentRepliesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CommentReplieId, data.CommentId, data.UserId, data.TargetUserId, data.Content, data.IsDeleted)
	}, commentRepliesCommentReplieIdKey)
	return ret, err
}

func (m *defaultCommentRepliesModel) Update(ctx context.Context, data *CommentReplies) error {
	commentRepliesCommentReplieIdKey := fmt.Sprintf("%s%v", cacheCommentRepliesCommentReplieIdPrefix, data.CommentReplieId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `comment_replie_id` = ?", m.table, commentRepliesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CommentId, data.UserId, data.TargetUserId, data.Content, data.IsDeleted, data.CommentReplieId)
	}, commentRepliesCommentReplieIdKey)
	return err
}

func (m *defaultCommentRepliesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCommentRepliesCommentReplieIdPrefix, primary)
}

func (m *defaultCommentRepliesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `comment_replie_id` = ? limit 1", commentRepliesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentRepliesModel) tableName() string {
	return m.table
}
