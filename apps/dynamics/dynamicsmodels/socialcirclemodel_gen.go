// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package dynamicsmodels

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	socialCircleFieldNames          = builder.RawFieldNames(&SocialCircle{})
	socialCircleRows                = strings.Join(socialCircleFieldNames, ",")
	socialCircleRowsExpectAutoSet   = strings.Join(stringx.Remove(socialCircleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	socialCircleRowsWithPlaceHolder = strings.Join(stringx.Remove(socialCircleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSocialCircleIdPrefix = "cache:socialCircle:id:"
	cacheSocialCircleUserIdPrefix = "cache:socialCircle:userid:"
)

type (
	socialCircleModel interface {
		Insert(ctx context.Context, data *SocialCircle) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*SocialCircle, error)
		FindByUserId(ctx context.Context, userId string) (*SocialCircle, error)
		Update(ctx context.Context, data *SocialCircle) error
		Delete(ctx context.Context, id string) error
	}

	defaultSocialCircleModel struct {
		sqlc.CachedConn
		table string
	}

	SocialCircle struct {
		Id        string         `db:"id"`
		UserId    string         `db:"user_id"`    // 用户ID（外键关联用户表）
		CoverUrl  sql.NullString `db:"cover_url"`  // 封面URL（支持CDN）
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 最后更新时间
	}
)

func newSocialCircleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSocialCircleModel {
	return &defaultSocialCircleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`social_circle`",
	}
}

func (m *defaultSocialCircleModel) Delete(ctx context.Context, id string) error {
	socialCircleIdKey := fmt.Sprintf("%s%v", cacheSocialCircleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, socialCircleIdKey)
	return err
}
func (m *defaultSocialCircleModel) FindByUserId(ctx context.Context, userId string) (*SocialCircle, error) {

	socialCircleUserIdKey := fmt.Sprintf("%s%v", cacheSocialCircleUserIdPrefix, userId)
	var resp SocialCircle
	err := m.QueryRowCtx(ctx, &resp, socialCircleUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", socialCircleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultSocialCircleModel) FindOne(ctx context.Context, id string) (*SocialCircle, error) {
	socialCircleIdKey := fmt.Sprintf("%s%v", cacheSocialCircleIdPrefix, id)
	var resp SocialCircle
	err := m.QueryRowCtx(ctx, &resp, socialCircleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", socialCircleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSocialCircleModel) Insert(ctx context.Context, data *SocialCircle) (sql.Result, error) {
	socialCircleIdKey := fmt.Sprintf("%s%v", cacheSocialCircleIdPrefix, data.Id)
	socialCircleUserIdKey := fmt.Sprintf("%s%v", cacheSocialCircleUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, socialCircleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.CoverUrl)
	}, socialCircleIdKey,socialCircleUserIdKey)
	return ret, err
}

func (m *defaultSocialCircleModel) Update(ctx context.Context, data *SocialCircle) error {
	socialCircleIdKey := fmt.Sprintf("%s%v", cacheSocialCircleIdPrefix, data.Id)
	socialCircleUserIdKey := fmt.Sprintf("%s%v", cacheSocialCircleUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, socialCircleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.CoverUrl, data.Id)
	}, socialCircleIdKey,socialCircleUserIdKey)
	return err
}

func (m *defaultSocialCircleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSocialCircleIdPrefix, primary)
}

func (m *defaultSocialCircleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", socialCircleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSocialCircleModel) tableName() string {
	return m.table
}
