syntax = "v1"

info (
	title:   "动态圈子服务接口"
	desc:    "支持动态发布、互动、通知等核心功能"
	author:  "ljp"
	version: "1.0"
)

// ================== 枚举定义 ==================
type (
	ContentType {
		TEXT             int `json:"text"` // 纯文字动态
		TEXT_WITH_IMAGES int `json:"textWithImages"` // 图文混合（静态图）
		TEXT_WITH_GIF    int `json:"textWithGif"` // 图文混合（动态图）
	}
	VisibleScope {
		FRIENDS int `json:"friends"` // 仅好友可见
		PRIVATE int `json:"private"` // 仅自己可见
		CUSTOM  int `json:"custom"` // 自定义可见
	}
	NotificationType {
		LIKE  int `json:"like"` // 点赞通知
		REPLY int `json:"reply"` // 评论回复通知
	}
)

// ================== 核心数据结构 ==================
type (
	PostContent {
		Text      string   `json:"text"` // 文字内容
		ImageUrls []string `json:"imageUrls"` // 图片/GIF URL列表（最多9个）
		Emoji     string   `json:"emoji"` // 表情符号
	}
	PostMeta {
		Location       string   `json:"location"` // 发布地点
		Scope          int      `json:"scope"` // 可见范围
		VisibleUserIds []string `json:"visibleUserIds"` // 自定义可见用户ID
	}
	Post {
		PostId   string      `json:"postId"` // 动态ID
		UserId   string      `json:"userId"` // 发布者ID
		Content  PostContent `json:"content"` // 内容主体
		Meta     PostMeta    `json:"meta"` // 元数据
		IsPinned bool        `json:"isPinned"` // 是否置顶
	}
	LikeAction {
		PostId   string `json:"postId"` // 目标动态ID
		LikerId  string `json:"likerId"` // 操作者ID
		IsCancel bool   `json:"isCancel"` // 取消点赞标识
	}
	Notification {
		Id            string `json:"id"` // 通知ID
		Type          int    `json:"type"` // 通知类型
		TriggerUserId string `json:"triggerUserId"` // 触发用户ID
		PostId        string `json:"postId"` // 关联动态ID
		CommentId     string `json:"commentId"` // 关联评论ID
		IsRead        bool   `json:"isRead"` // 已读状态
	}
	Pagination {
		PageSize  int    `json:"pageSize"` // 每页数量（默认10）
		PageToken string `json:"pageToken"` // 翻页令牌
	}
	Ids {
		ids []string `json:"ids"`
	}
	ListCommentRespStruct {
		userId       string `json:"userId"`
		targetUserId string `json:"targetUserId"`
		content      string `json:"content"`
	}
	ListCommentResp {
		list []ListCommentRespStruct `json:"list"`
	}
)

// ================== 服务路由定义 ==================
@server (
	prefix:     /v1/dynamics // 全局路由前缀
	middleware: LimitMiddleware
)
service dynamics {
	@doc "单个post信息"
	@handler getPostInfo
	get /getPostInfo (GetPostInfoReq) returns (Post)

	@doc "点赞列表"
	@handler listLikeByPostId
	get /listLikeByPostId (GetPostInfoReq) returns (Ids)

	@doc "评论列表"
	@handler listCommentByPostId
	get /listCommentByPostId (GetPostInfoReq) returns (ListCommentResp)

	// 动态管理接口组[1,5](@ref)
	@doc "创建动态"
	@handler createPost
	post /createPost (CreatePostRequest) returns (Post)

	@doc "删除动态"
	@handler deletePost
	delete /deletePost (DeletePostRequest) returns (Empty)

	@doc "置顶/取消置顶"
	@handler pinPost
	put /pinPost (PinPostRequest) returns (Empty)

	@doc "获取用户动态列表"
	@handler listUserPosts
	get /listUserPosts (ListUserPostsRequest) returns (PostListResponse)

	@doc "设置个人封面"
	@handler setCover
	put /setCover (SetCoverRequest) returns (Empty)

	@doc "浏览动态流"
	@handler listVisiblePosts
	get /listVisiblePosts (ListVisiblePostsRequest) returns (PostListResponse)

	// 互动接口组[1,9](@ref)
	@doc "点赞/取消点赞"
	@handler toggleLike
	post /toggleLike (LikeAction) returns (Empty)

	@doc "创建评论"
	@handler createComment
	post /createComment (CreateCommentReq) returns (Empty)

	@doc "创建评论回复"
	@handler createCommentReplay
	post /createCommentReplay (CreateCommentReplayReq) returns (Empty)

	@doc "更新评论状态"
	@handler updateComment
	put /updateComment (UpdateCommentReq) returns (Empty)

	@doc "更新回复状态"
	@handler updateCommentReplay
	put /updateCommentReplay (UpdateCommentReplayReq) returns (Empty)

	@doc "删除评论"
	@handler deleteComment
	delete /deleteComment (DeleteCommentReq) returns (Empty)

	@doc "删除评论回复"
	@handler deleteCommentReplay
	delete /deleteCommentReplay (DeleteCommentReplayReq) returns (Empty)

	// 通知接口组[1,5](@ref)
	@doc "创建通知"
	@handler createNotification
	post /createNotification (CreateNotificationReq) returns (Empty)

	@doc "更新通知状态"
	@handler updateNotification
	put /updateNotification (UpdateNotificationReq) returns (Empty)

	@doc "获取通知列表"
	@handler listNotifications
	get /listNotifications (ListNotificationsRequest) returns (ListNotificationsResponse)

	@doc "获取未读数"
	@handler getUnreadCount
	get /getUnreadCount (GetUnreadCountRequest) returns (GetUnreadCountResponse)

	@handler ping
	get /ping
}

type Empty {} // 空响应体

// ================== 请求/响应结构 ==================
type (
	GetPostInfoReq {
		postId string `json:"postId"`
	}
	CreatePostRequest {
		UserId  string      `json:"userId"`
		Content PostContent `json:"content"`
		Meta    PostMeta    `json:"meta"`
	}
	DeletePostRequest {
		UserId string `json:"userId"` // 操作者ID
		PostId string `json:"postId"` // 路径参数
	}
	PinPostRequest {
		UserId string `json:"userId"`
		PostId string `json:"postId"`
		Pin    bool   `json:"pin"` // true=置顶
	}
	SetCoverRequest {
		UserId   string `json:"userId"`
		CoverUrl string `json:"coverUrl"` // 封面URL
	}
	ListUserPostsRequest {
		UserId     string     `json:"userId"` // 目标用户ID
		IsPin      bool       `json:"isPin"` // 置顶过滤
		pagination Pagination `json:"pagination"` // 分页参数
	}
	ListVisiblePostsRequest {
		ViewerId   string     `json:"viewerId"` // 浏览者ID
		pagination Pagination `json:"pagination"`
	}
	PostListResponse {
		Posts         []Post `json:"posts"`
		NextPageToken string `json:"nextPageToken"`
	}
	CreateNotificationReq {
		UserId        string `json:"userId"` // 接收者ID
		Type          int    `json:"type"` // 通知类型
		TriggerUserId string `json:"triggerUserId"` // 触发者ID
		PostId        string `json:"postId"` // 动态ID
		CommentId     string `json:"commentId"` // 评论ID
	}
	CreateCommentReq {
		PostId  string `json:"postId"`
		UserId  string `json:"userId"` // 评论者ID
		Content string `json:"content"` // 评论内容
	}
	CreateCommentReplayReq {
		CommentId string `json:"commentId"`
		UserId    string `json:"userId"` // 回复者ID
		Content   string `json:"content"` // 回复内容
	}
	UpdateCommentReq {
		IsDeleted bool   `json:"isDeleted"` // 删除状态
		CommentId string `json:"commentId"` // 评论ID
	}
	UpdateCommentReplayReq {
		IsDeleted       bool   `json:"isDeleted"` // 删除状态
		CommentReplayId string `json:"commentReplayId"` // 回复ID
	}
	UpdateNotificationReq {
		UserId string `json:"userId"` // 用户ID
	}
	ListNotificationsRequest {
		UserId     string     `json:"userId"` // 用户ID
		pagination Pagination `json:"pagination"` // 分页参数
	}
	ListNotificationsResponse {
		Notifications []Notification `json:"notifications"`
		NextPageToken string         `json:"nextPageToken"`
	}
	GetUnreadCountRequest {
		UserId string `json:"userId"` // 用户ID
	}
	GetUnreadCountResponse {
		UnreadCount int `json:"unreadCount"` // 未读数
	}
	DeleteCommentReq {
		CommentId string `json:"commentId"`
	}
	DeleteCommentReplayReq {
		CommentReplayId string `json:"commentReplayId"`
	}
)

