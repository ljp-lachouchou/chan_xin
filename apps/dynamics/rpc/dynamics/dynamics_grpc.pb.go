// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: apps/dynamics/rpc/dynamics.proto

package dynamics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dynamics_CreatePost_FullMethodName        = "/dynamics.dynamics/CreatePost"
	Dynamics_DeletePost_FullMethodName        = "/dynamics.dynamics/DeletePost"
	Dynamics_ToggleLike_FullMethodName        = "/dynamics.dynamics/ToggleLike"
	Dynamics_PinPost_FullMethodName           = "/dynamics.dynamics/PinPost"
	Dynamics_ListUserPosts_FullMethodName     = "/dynamics.dynamics/ListUserPosts"
	Dynamics_SetCover_FullMethodName          = "/dynamics.dynamics/SetCover"
	Dynamics_ListVisiblePosts_FullMethodName  = "/dynamics.dynamics/ListVisiblePosts"
	Dynamics_ListNotifications_FullMethodName = "/dynamics.dynamics/ListNotifications"
	Dynamics_GetUnreadCount_FullMethodName    = "/dynamics.dynamics/GetUnreadCount"
)

// DynamicsClient is the client API for Dynamics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ================== 服务接口 ==================
type DynamicsClient interface {
	// 创建动态（需提供内容和隐私设置）
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error)
	// 删除动态（仅创建者可操作）
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Empty, error)
	// 点赞/取消点赞
	ToggleLike(ctx context.Context, in *LikeAction, opts ...grpc.CallOption) (*Empty, error)
	// 置顶/取消置顶动态
	PinPost(ctx context.Context, in *PinPostRequest, opts ...grpc.CallOption) (*Empty, error)
	// 获取用户所有动态（按置顶状态+时间倒序）
	ListUserPosts(ctx context.Context, in *ListUserPostsRequest, opts ...grpc.CallOption) (*PostListResponse, error)
	// 设置个人动态封面（用于个人主页）
	SetCover(ctx context.Context, in *SetCoverRequest, opts ...grpc.CallOption) (*Empty, error)
	// 浏览可见动态流（根据权限过滤+分页）
	ListVisiblePosts(ctx context.Context, in *ListVisiblePostsRequest, opts ...grpc.CallOption) (*PostListResponse, error)
	// 获取通知列表（分页）
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
	// 新增：获取未读通知数量
	GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error)
}

type dynamicsClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicsClient(cc grpc.ClientConnInterface) DynamicsClient {
	return &dynamicsClient{cc}
}

func (c *dynamicsClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Post)
	err := c.cc.Invoke(ctx, Dynamics_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dynamics_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) ToggleLike(ctx context.Context, in *LikeAction, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dynamics_ToggleLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) PinPost(ctx context.Context, in *PinPostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dynamics_PinPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) ListUserPosts(ctx context.Context, in *ListUserPostsRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, Dynamics_ListUserPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) SetCover(ctx context.Context, in *SetCoverRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Dynamics_SetCover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) ListVisiblePosts(ctx context.Context, in *ListVisiblePostsRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResponse)
	err := c.cc.Invoke(ctx, Dynamics_ListVisiblePosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotificationsResponse)
	err := c.cc.Invoke(ctx, Dynamics_ListNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicsClient) GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUnreadCountResponse)
	err := c.cc.Invoke(ctx, Dynamics_GetUnreadCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicsServer is the server API for Dynamics service.
// All implementations must embed UnimplementedDynamicsServer
// for forward compatibility.
//
// ================== 服务接口 ==================
type DynamicsServer interface {
	// 创建动态（需提供内容和隐私设置）
	CreatePost(context.Context, *CreatePostRequest) (*Post, error)
	// 删除动态（仅创建者可操作）
	DeletePost(context.Context, *DeletePostRequest) (*Empty, error)
	// 点赞/取消点赞
	ToggleLike(context.Context, *LikeAction) (*Empty, error)
	// 置顶/取消置顶动态
	PinPost(context.Context, *PinPostRequest) (*Empty, error)
	// 获取用户所有动态（按置顶状态+时间倒序）
	ListUserPosts(context.Context, *ListUserPostsRequest) (*PostListResponse, error)
	// 设置个人动态封面（用于个人主页）
	SetCover(context.Context, *SetCoverRequest) (*Empty, error)
	// 浏览可见动态流（根据权限过滤+分页）
	ListVisiblePosts(context.Context, *ListVisiblePostsRequest) (*PostListResponse, error)
	// 获取通知列表（分页）
	ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error)
	// 新增：获取未读通知数量
	GetUnreadCount(context.Context, *GetUnreadCountRequest) (*GetUnreadCountResponse, error)
	mustEmbedUnimplementedDynamicsServer()
}

// UnimplementedDynamicsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDynamicsServer struct{}

func (UnimplementedDynamicsServer) CreatePost(context.Context, *CreatePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedDynamicsServer) DeletePost(context.Context, *DeletePostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedDynamicsServer) ToggleLike(context.Context, *LikeAction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleLike not implemented")
}
func (UnimplementedDynamicsServer) PinPost(context.Context, *PinPostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinPost not implemented")
}
func (UnimplementedDynamicsServer) ListUserPosts(context.Context, *ListUserPostsRequest) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPosts not implemented")
}
func (UnimplementedDynamicsServer) SetCover(context.Context, *SetCoverRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCover not implemented")
}
func (UnimplementedDynamicsServer) ListVisiblePosts(context.Context, *ListVisiblePostsRequest) (*PostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVisiblePosts not implemented")
}
func (UnimplementedDynamicsServer) ListNotifications(context.Context, *ListNotificationsRequest) (*ListNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifications not implemented")
}
func (UnimplementedDynamicsServer) GetUnreadCount(context.Context, *GetUnreadCountRequest) (*GetUnreadCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadCount not implemented")
}
func (UnimplementedDynamicsServer) mustEmbedUnimplementedDynamicsServer() {}
func (UnimplementedDynamicsServer) testEmbeddedByValue()                  {}

// UnsafeDynamicsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicsServer will
// result in compilation errors.
type UnsafeDynamicsServer interface {
	mustEmbedUnimplementedDynamicsServer()
}

func RegisterDynamicsServer(s grpc.ServiceRegistrar, srv DynamicsServer) {
	// If the following call pancis, it indicates UnimplementedDynamicsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dynamics_ServiceDesc, srv)
}

func _Dynamics_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_ToggleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).ToggleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_ToggleLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).ToggleLike(ctx, req.(*LikeAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_PinPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).PinPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_PinPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).PinPost(ctx, req.(*PinPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_ListUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).ListUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_ListUserPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).ListUserPosts(ctx, req.(*ListUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_SetCover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).SetCover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_SetCover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).SetCover(ctx, req.(*SetCoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_ListVisiblePosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVisiblePostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).ListVisiblePosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_ListVisiblePosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).ListVisiblePosts(ctx, req.(*ListVisiblePostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_ListNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dynamics_GetUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicsServer).GetUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamics_GetUnreadCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicsServer).GetUnreadCount(ctx, req.(*GetUnreadCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynamics_ServiceDesc is the grpc.ServiceDesc for Dynamics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynamics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamics.dynamics",
	HandlerType: (*DynamicsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _Dynamics_CreatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Dynamics_DeletePost_Handler,
		},
		{
			MethodName: "ToggleLike",
			Handler:    _Dynamics_ToggleLike_Handler,
		},
		{
			MethodName: "PinPost",
			Handler:    _Dynamics_PinPost_Handler,
		},
		{
			MethodName: "ListUserPosts",
			Handler:    _Dynamics_ListUserPosts_Handler,
		},
		{
			MethodName: "SetCover",
			Handler:    _Dynamics_SetCover_Handler,
		},
		{
			MethodName: "ListVisiblePosts",
			Handler:    _Dynamics_ListVisiblePosts_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _Dynamics_ListNotifications_Handler,
		},
		{
			MethodName: "GetUnreadCount",
			Handler:    _Dynamics_GetUnreadCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/dynamics/rpc/dynamics.proto",
}
