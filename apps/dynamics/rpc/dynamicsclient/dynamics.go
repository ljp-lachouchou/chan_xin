// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: dynamics.proto

package dynamicsclient

import (
	"context"

	"github.com/ljp-lachouchou/chan_xin/apps/dynamics/rpc/dynamics"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateCommentReplayReq    = dynamics.CreateCommentReplayReq
	CreateCommentReq          = dynamics.CreateCommentReq
	CreateNotificationReq     = dynamics.CreateNotificationReq
	CreatePostRequest         = dynamics.CreatePostRequest
	DeleteCommentReplayReq    = dynamics.DeleteCommentReplayReq
	DeleteCommentReq          = dynamics.DeleteCommentReq
	DeletePostRequest         = dynamics.DeletePostRequest
	Empty                     = dynamics.Empty
	GetUnreadCountRequest     = dynamics.GetUnreadCountRequest
	GetUnreadCountResponse    = dynamics.GetUnreadCountResponse
	LikeAction                = dynamics.LikeAction
	ListNotificationsRequest  = dynamics.ListNotificationsRequest
	ListNotificationsResponse = dynamics.ListNotificationsResponse
	ListUserPostsRequest      = dynamics.ListUserPostsRequest
	ListVisiblePostsRequest   = dynamics.ListVisiblePostsRequest
	Notification              = dynamics.Notification
	Pagination                = dynamics.Pagination
	PinPostRequest            = dynamics.PinPostRequest
	Post                      = dynamics.Post
	PostContent               = dynamics.PostContent
	PostListResponse          = dynamics.PostListResponse
	PostMeta                  = dynamics.PostMeta
	SetCoverRequest           = dynamics.SetCoverRequest
	UpdateCommentReplayReq    = dynamics.UpdateCommentReplayReq
	UpdateCommentReq          = dynamics.UpdateCommentReq
	UpdateNotificationReq     = dynamics.UpdateNotificationReq

	Dynamics interface {
		// 创建动态（需提供内容和隐私设置）
		CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error)
		// 删除动态（仅创建者可操作）
		DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Empty, error)
		// 点赞/取消点赞
		ToggleLike(ctx context.Context, in *LikeAction, opts ...grpc.CallOption) (*Empty, error)
		// 置顶/取消置顶动态
		PinPost(ctx context.Context, in *PinPostRequest, opts ...grpc.CallOption) (*Empty, error)
		// 获取用户所有动态（按置顶状态+时间倒序）
		ListUserPosts(ctx context.Context, in *ListUserPostsRequest, opts ...grpc.CallOption) (*PostListResponse, error)
		// 设置个人动态封面（用于个人主页）
		SetCover(ctx context.Context, in *SetCoverRequest, opts ...grpc.CallOption) (*Empty, error)
		// 浏览可见动态流（根据权限过滤+分页）
		ListVisiblePosts(ctx context.Context, in *ListVisiblePostsRequest, opts ...grpc.CallOption) (*PostListResponse, error)
		// 创建评论
		CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*Empty, error)
		// 创建评论回复
		CreateCommentReplay(ctx context.Context, in *CreateCommentReplayReq, opts ...grpc.CallOption) (*Empty, error)
		// 更新评论
		UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*Empty, error)
		// 更新评论回复
		UpdateCommentReplay(ctx context.Context, in *UpdateCommentReplayReq, opts ...grpc.CallOption) (*Empty, error)
		// 更新通知
		UpdateNotification(ctx context.Context, in *UpdateNotificationReq, opts ...grpc.CallOption) (*Empty, error)
		// 删除评论
		DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*Empty, error)
		// 删除评论回复
		DeleteCommentReplay(ctx context.Context, in *DeleteCommentReplayReq, opts ...grpc.CallOption) (*Empty, error)
		// 创建通知
		CreateNotification(ctx context.Context, in *CreateNotificationReq, opts ...grpc.CallOption) (*Empty, error)
		// 获取通知列表（分页）
		ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error)
		// 新增：获取未读通知数量
		GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error)
	}

	defaultDynamics struct {
		cli zrpc.Client
	}
)

func NewDynamics(cli zrpc.Client) Dynamics {
	return &defaultDynamics{
		cli: cli,
	}
}

// 创建动态（需提供内容和隐私设置）
func (m *defaultDynamics) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.CreatePost(ctx, in, opts...)
}

// 删除动态（仅创建者可操作）
func (m *defaultDynamics) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.DeletePost(ctx, in, opts...)
}

// 点赞/取消点赞
func (m *defaultDynamics) ToggleLike(ctx context.Context, in *LikeAction, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.ToggleLike(ctx, in, opts...)
}

// 置顶/取消置顶动态
func (m *defaultDynamics) PinPost(ctx context.Context, in *PinPostRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.PinPost(ctx, in, opts...)
}

// 获取用户所有动态（按置顶状态+时间倒序）
func (m *defaultDynamics) ListUserPosts(ctx context.Context, in *ListUserPostsRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.ListUserPosts(ctx, in, opts...)
}

// 设置个人动态封面（用于个人主页）
func (m *defaultDynamics) SetCover(ctx context.Context, in *SetCoverRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.SetCover(ctx, in, opts...)
}

// 浏览可见动态流（根据权限过滤+分页）
func (m *defaultDynamics) ListVisiblePosts(ctx context.Context, in *ListVisiblePostsRequest, opts ...grpc.CallOption) (*PostListResponse, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.ListVisiblePosts(ctx, in, opts...)
}

// 创建评论
func (m *defaultDynamics) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.CreateComment(ctx, in, opts...)
}

// 创建评论回复
func (m *defaultDynamics) CreateCommentReplay(ctx context.Context, in *CreateCommentReplayReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.CreateCommentReplay(ctx, in, opts...)
}

// 更新评论
func (m *defaultDynamics) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.UpdateComment(ctx, in, opts...)
}

// 更新评论回复
func (m *defaultDynamics) UpdateCommentReplay(ctx context.Context, in *UpdateCommentReplayReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.UpdateCommentReplay(ctx, in, opts...)
}

// 更新通知
func (m *defaultDynamics) UpdateNotification(ctx context.Context, in *UpdateNotificationReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.UpdateNotification(ctx, in, opts...)
}

// 删除评论
func (m *defaultDynamics) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}

// 删除评论回复
func (m *defaultDynamics) DeleteCommentReplay(ctx context.Context, in *DeleteCommentReplayReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.DeleteCommentReplay(ctx, in, opts...)
}

// 创建通知
func (m *defaultDynamics) CreateNotification(ctx context.Context, in *CreateNotificationReq, opts ...grpc.CallOption) (*Empty, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.CreateNotification(ctx, in, opts...)
}

// 获取通知列表（分页）
func (m *defaultDynamics) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*ListNotificationsResponse, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.ListNotifications(ctx, in, opts...)
}

// 新增：获取未读通知数量
func (m *defaultDynamics) GetUnreadCount(ctx context.Context, in *GetUnreadCountRequest, opts ...grpc.CallOption) (*GetUnreadCountResponse, error) {
	client := dynamics.NewDynamicsClient(m.cli.Conn())
	return client.GetUnreadCount(ctx, in, opts...)
}
