syntax = "proto3";  // 使用proto3语法规范[1,5](@ref)
package dynamics;

option go_package = "./dynamics";

message Empty{}
// ================== 枚举定义 ==================
// 动态内容类型（文字/图文）[7](@ref)
enum ContentType {
  TEXT = 0;             // 纯文字动态
  TEXT_WITH_IMAGES = 1; // 图文混合动态（静态图）
  TEXT_WITH_GIF = 2;    // 图文混合动态（支持动态图）
}

// 动态可见范围控制[6](@ref)
enum VisibleScope {
  FRIENDS = 0; // 仅好友可见
  PRIVATE = 1; // 仅自己可见
  CUSTOM = 2;  // 自定义用户可见
}

// 通知事件类型[3](@ref)
enum NotificationType {
  LIKE = 0;  // 点赞通知
  REPLY = 1; // 评论回复通知
}

// ================== 消息结构 ==================
// 动态内容主体（支持文字/图片/GIF/表情）[7](@ref)
message PostContent {
  string text = 1;              // 文字内容（必填）
  repeated string image_urls = 2; // 图片或GIF的URL列表（最多9个）[4](@ref)
  string emoji = 3;             // 表情符号（Unicode或自定义标识）
}

// 动态元数据（隐私控制与附加信息）
message PostMeta {
  string location = 1;           // 发布地点（如"北京·故宫"）
  VisibleScope scope = 2;        // 可见范围控制[6](@ref)
  repeated string visible_user_ids = 3; // 当scope=CUSTOM时生效的可见用户ID列表
}

// 动态核心结构
message Post {
  string post_id = 1;  // 动态唯一ID（服务端生成）
  string user_id = 2;  // 发布者ID
  PostContent content = 3;  // 动态内容主体
  PostMeta meta = 4;       // 动态元数据
  bool is_pinned = 5;      // 是否置顶（置顶动态不参与时间线排序）
}

// 点赞/取消点赞操作
message LikeAction {
  string post_id = 1;    // 目标动态ID
  string liker_id = 2;   // 操作者ID
  bool is_cancel = 3;    // true=取消点赞，false=点赞
}

// 通知信息（支持点赞/评论回复）
message Notification {
  string id = 1;                // 通知唯一ID
  NotificationType type = 2;     // 通知类型[3](@ref)
  string trigger_user_id = 3;   // 触发通知的用户ID
  string post_id = 4;            // 关联的动态ID
  string comment_id = 5;        // 关联的评论ID（仅REPLY类型有效）
  bool is_read = 6;              // 是否已读（新增字段）
}

// 分页请求结构[1](@ref)
message Pagination {
  int32 page_size = 1;    // 每页数量（建议值：10-20）
  string page_token = 2;  // 翻页令牌（首次请求留空，后续使用响应中的next_page_token）
}

// 动态列表响应
message PostListResponse {
  repeated Post posts = 1;         // 动态列表
  string next_page_token = 2;      // 下一页令牌（无更多数据时为空）
}
message CreateNotificationReq {
  string userId = 1;//接收用户id
  NotificationType type = 2;//通知类型
  string triggerUserId = 3; // 发送通知id
  string postId = 4; //动态的id
  string commentId = 5; //评论的id
}
message CreateCommentReq {
  string postId = 1;
  string userId = 2; //评论用户id
  string content = 3;

}
message CreateCommentResp {
  string commentId = 1;
}
message CreateCommentReplayReq {
  string commentId = 1;
  string userId = 2;//发送这
  string content = 3;

}
message CreateCommentReplayResp {
  string commentReplyId = 1;
  string postId = 2;
}
message DeleteCommentReq {
  string commentId = 1;
}
message DeleteCommentReplayReq{
  string commentReplayId = 1;
}
message UpdateCommentReq {
  bool isDeleted = 1;
  string commentId = 2;
}
message UpdateCommentReplayReq {
  bool isDeleted = 1;
  string commentReplayId = 2;
}
message UpdateNotificationReq {
  string userId = 1;
}
// ================== 请求/响应结构 ==================
message CreatePostRequest {
  string user_id = 1;      // 发布者ID
  PostContent content = 2; // 动态内容
  PostMeta meta = 3;       // 动态元数据
}

message DeletePostRequest {
  string user_id = 1;  // 操作者ID（需与动态创建者匹配）
  string post_id = 2;  // 要删除的动态ID
}

message PinPostRequest {
  string user_id = 1;  // 操作者ID（需与动态创建者匹配）
  string post_id = 2;  // 目标动态ID
  bool pin = 3;        // 操作标识（true=置顶，false=取消置顶）
}

message ListUserPostsRequest {
  string user_id = 1;          // 目标用户ID
  optional bool is_pin = 2; //可选择
  Pagination pagination = 3;   // 分页参数
}

message SetCoverRequest {
  string user_id = 1;    // 用户ID
  string cover_url = 2;  // 封面图URL（需CDN地址）
}

message ListVisiblePostsRequest {
  string viewer_id = 1;      // 浏览者ID（用于权限校验）
  Pagination pagination = 2; // 分页参数
}

message ListNotificationsRequest {
  string user_id = 1;        // 用户ID
  Pagination pagination = 2; // 分页参数
}

message ListNotificationsResponse {
  repeated Notification notifications = 1; // 通知列表
  string next_page_token = 2;              // 下一页令牌
}
message ListNotificationsByUserIdAndTypeReq {
  string userId = 1;
  NotificationType type = 2;
}
message GetPostInfoReq {
  string postId = 1;
}
message ListNotificationsByUserIdAndTypeReqResponse {
  repeated Notification notifications = 1; // 通知列表
}
// 新增：未读通知计数请求
message GetUnreadCountRequest {
  string user_id = 1;  // 用户ID
}

// 新增：未读通知计数响应
message GetUnreadCountResponse {
  int32 unread_count = 1;  // 未读通知总数
}
// ================== 服务接口 ==================
service dynamics {
  // 创建动态（需提供内容和隐私设置）
  rpc CreatePost (CreatePostRequest) returns (Post);

  // 删除动态（仅创建者可操作）
  rpc DeletePost (DeletePostRequest) returns (Empty);

  // 点赞/取消点赞
  rpc ToggleLike (LikeAction) returns (Empty);

  // 置顶/取消置顶动态
  rpc PinPost (PinPostRequest) returns (Empty);

  // 获取用户所有动态（按置顶状态+时间倒序）
  rpc ListUserPosts (ListUserPostsRequest) returns (PostListResponse);

  // 设置个人动态封面（用于个人主页）
  rpc SetCover (SetCoverRequest) returns (Empty);

  // 浏览可见动态流（根据权限过滤+分页）
  rpc ListVisiblePosts (ListVisiblePostsRequest) returns (PostListResponse);

  //创建评论
  rpc CreateComment(CreateCommentReq) returns(CreateCommentResp);
  //创建评论回复
  rpc CreateCommentReplay(CreateCommentReplayReq) returns(CreateCommentReplayResp);
  //更新评论
  rpc UpdateComment(UpdateCommentReq) returns(Empty);
  //更新评论回复
  rpc UpdateCommentReplay(UpdateCommentReplayReq) returns(Empty);
  //更新通知
  rpc UpdateNotification(UpdateNotificationReq) returns(Empty);
  //删除评论
  rpc DeleteComment(DeleteCommentReq) returns(Empty);
  //删除评论回复
  rpc DeleteCommentReplay(DeleteCommentReplayReq) returns(Empty);
  //创建通知
  rpc CreateNotification(CreateNotificationReq) returns(Empty);

  // 获取通知列表（分页）
  rpc ListNotifications (ListNotificationsRequest) returns (ListNotificationsResponse);

  //单个post信息
  rpc GetPostInfo(GetPostInfoReq) returns(Post);
  //点赞列表
  rpc ListLikeByPostId(GetPostInfoReq) returns(Ids);

  //评论列表
  rpc ListCommentByPostId(GetPostInfoReq) returns(ListCommentResp);

  //根据type和userid查找
  rpc ListNotificationsByUserIdAndType(ListNotificationsByUserIdAndTypeReq) returns(ListNotificationsByUserIdAndTypeReqResponse);
  // 新增：获取未读通知数量
  rpc GetUnreadCount (GetUnreadCountRequest) returns (GetUnreadCountResponse);
}
message Ids {
  repeated string ids = 1;
}
message IdsMap {
  map<string,string> IdsMap = 1;
}
message ListCommentRespStruct {
  string user_id = 1; //发送方
  string target_user_id = 2; //接收方
  string content = 3;//内容
}
message ListCommentResp {
  repeated ListCommentRespStruct list = 1;
}

